{"version":3,"sources":["components/content/posts/posts.module.css","components/content/profile/profile.module.css","redux/reducers/errorReducer.ts","redux/reducers/messagesReducer.ts","redux/reducers/usersReducer.ts","api/chatApi.ts","redux/reducers/chatReducer.ts","components/common/loading/loading.module.css","components/common/error/error.module.css","redux/reducers/appReducer.ts","hoc/withSuspense.tsx","assets/img/vk.svg","assets/img/github.svg","components/footer/Footer.tsx","assets/img/profile.svg","assets/img/messages.svg","assets/img/users.svg","assets/img/chat.svg","components/navigation/friends/Friend.tsx","redux/selectors/navigationSelectors.ts","components/navigation/Navigation.tsx","components/content/profile/status/ProfileStatus.tsx","components/content/profile/info/ProfileInfoForm.tsx","components/content/profile/Profile.tsx","api/profileAPI.ts","redux/reducers/profileReducer.ts","components/content/posts/post/Post.tsx","components/content/posts/addPostForm/AddPostForm.tsx","components/content/posts/Posts.tsx","components/content/posts/PostsContainer.tsx","components/content/Content.tsx","components/content/ContentContainer.tsx","assets/img/logo.svg","components/header/Header.tsx","components/header/HeaderContainer.tsx","components/common/error/Error.tsx","redux/store.ts","App.tsx","index.tsx","components/common/loading/Loading.tsx","components/common/formsControl/FormsControl.tsx","components/navigation/navigation.module.css","redux/reducers/asideReducer.ts","components/common/formsControl/formscontol.module.css","assets/img/unknownUser.jpeg","api/authAPI.ts","api/securityAPI.ts","redux/reducers/authReducer.ts","api/usersAPI.ts","components/content/posts/post/post.module.css","components/header/header.module.css","components/footer/footer.module.css","components/navigation/friends/friend.module.css","api/api.ts","utils/validators/validators.ts"],"names":["module","exports","initialState","error","errorMessage","action","catchError","type","errorReducer","state","messagesData","actions","sendMessage","newMessageText","messagesReducer","newMessage","id","v1","message","users","pageSize","totalUsersCount","currentPage","isLoading","followingProgress","filter","term","friend","userId","totalCount","pageNumber","payload","getUsers","dispatch","a","usersAPI","data","items","follow","resultCode","ResultCodes","Success","getFriendsList","unfollow","usersReducer","map","user","followed","ws","subscribers","closeHandler","notifySubscribers","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","subscriber","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","messages","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","m","index","array","length","initialized","appReducer","withSuspense","WrappedComponent","props","Suspense","fallback","Loading","Footer","className","footerClasses","footer","leftCol","href","target","rel","src","vkIcon","alt","githubIcon","rightCol","Friend","name","url","to","friendClasses","toLowerCase","photo","avatar","getFriends","aside","friends","getIsLoading","Navigation","useSelector","useDispatch","useEffect","friendsList","photos","large","navigationClasses","navigation","activeClassName","active","profileIcon","messagesIcon","usersIcon","chatIcon","friendsBlock","ProfileStatus","useState","editMode","setEditMode","setStatus","onBlur","updateStatus","autoFocus","onFocus","select","onChange","currentTarget","value","onClick","isOwner","reduxForm","form","handleSubmit","profile","onSubmit","profileClasses","dataItemName","Field","component","Input","placeholder","field","dataItemCheck","dataItemField","Textarea","fieldText","dataItemContacts","Object","keys","contacts","key","social","formControlClasses","formSummaryError","button","ProfileInfo","goToEditMode","dataItem","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","Profile","savePhoto","saveProfileData","profileLoading","upload","files","info","fullName","initialValues","formData","then","profileAPI","instance","get","response","put","photoFile","FormData","append","profileData","postsData","addPost","newPostText","setUserProfile","savePhotoSuccess","getUserProfile","profileReducer","newPost","author","date","title","text","Post","postClasses","post","header","left","content","maxLength30","maxLengthCreator","AddPostForm","onSubmitSuccess","result","reset","validate","requiredField","Posts","posts","reverse","postsClasses","values","connect","profilePage","Content","PostsContainer","ContentContainer","this","match","params","authorizedUserId","history","getStatus","refreshProfile","prevProps","prevState","React","Component","compose","withRouter","auth","isAuth","file","getState","stopSubmit","_error","Promise","reject","Header","login","logout","headerClasses","logotype","logo","HeaderContainer","Error","errorClasses","rootReducer","combineReducers","messagesPage","asideReducer","usersPage","authReducer","app","chat","formReducer","store","createStore","applyMiddleware","thunkMiddleware","MessagesContainer","lazy","Users","LoginPage","ChatPage","SuspendedMessagesPage","SuspendedUsersPage","SuspendedLoginPage","SuspendedChatPage","App","initializeApp","exact","path","render","AppContainer","promise","getAuthUserData","all","SocialNetworkApp","ReactDOM","document","getElementById","loadingClasses","loading","input","meta","hasError","touched","formControl","authAPI","email","password","rememberMe","captcha","delete","securityAPI","captchaUrl","ResultCodesForCaptcha","CaptchaIsRequired","getCaptchaUrl","isFollow","axios","create","withCredentials","baseURL","headers","maxLength"],"mappings":"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","file":"static/js/main.c8cd4c67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"posts_posts__29oo6\",\"addPost\":\"posts_addPost__3cpu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1J6m0\",\"profileLoading\":\"profile_profileLoading__6b-v7\",\"photo\":\"profile_photo__1Sw9L\",\"upload\":\"profile_upload__3MOeI\",\"info\":\"profile_info__1XW5B\",\"status\":\"profile_status__3r-jF\",\"data\":\"profile_data__3iiHG\",\"button\":\"profile_button__jGi_t\",\"dataItem\":\"profile_dataItem__2CDL6\",\"dataItemName\":\"profile_dataItemName__3KMiB\",\"dataItemCheck\":\"profile_dataItemCheck__2QLfe\",\"dataItemContacts\":\"profile_dataItemContacts__lxXNs\",\"dataItemField\":\"profile_dataItemField__1EQxQ\",\"contacts\":\"profile_contacts__3JCNb\",\"field\":\"profile_field__AP8Tm\",\"fieldText\":\"profile_fieldText__2LKmb\",\"social\":\"profile_social__3CJJu\"};","import {InferActionTypes} from '../store'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof action>\n\nconst initialState = {\n    error: false,\n    errorMessage: null as null | string\n}\n\nconst errorReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'CATCH_ERROR':\n            return {\n                ...state,\n                error: action.error,\n                errorMessage: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const action = {\n    catchError: (error: boolean, errorMessage: null | string) => ({type: 'CATCH_ERROR', error, errorMessage} as const)\n}\n\nexport default errorReducer\n","import {InferActionTypes} from '../store'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof initialState\nexport type MessagesType = {\n    id: string\n    message: string\n}\ntype ActionsTypes = InferActionTypes<typeof actions>\n\nconst initialState = {\n    messagesData: [] as MessagesType[]\n}\n\nconst messagesReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SEND_MESSAGE':\n            let newMessage = {\n                id: v1(),\n                message: action.newMessageText\n            }\n            return {\n                ...state,\n                messagesData: [...state.messagesData, newMessage]\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageText: string) => ({type: 'SEND_MESSAGE', newMessageText} as const)\n}\n\nexport default messagesReducer\n","import {getFriendsList} from './asideReducer'\nimport {action} from './errorReducer'\nimport {UserType} from '../../types/types'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {usersAPI} from '../../api/usersAPI'\nimport {ResultCodes} from '../../api/api'\n\nexport type InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    users: [] as UserType[],\n    pageSize: 12,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isLoading: false,\n    followingProgress: [] as number[], // array of users ids\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case 'SET_CURRENT_PAGE':\n            return {\n                ...state,\n                currentPage: action.pageNumber\n            }\n\n        case 'SET_FILTER':\n            return {\n                ...state,\n                filter: action.payload\n            }\n\n        case 'SET_TOTAL_USERS_COUNT':\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case 'TOGGLE_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading\n            }\n\n        case 'TOGGLE_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingProgress: action.isLoading\n                    ? [...state.followingProgress, action.userId]\n                    : state.followingProgress.filter(id => id !== action.userId)\n            }\n\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: true}\n                    }\n                    return user\n                })\n            }\n\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: false}\n                    }\n                    return user\n                })\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    toggleFollowingProgress: (isLoading: boolean, userId: number) => ({\n        type: 'TOGGLE_FOLLOWING_PROGRESS',\n        isLoading,\n        userId\n    } as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n    toggleIsLoading: (isLoading: boolean) => ({type: 'TOGGLE_IS_LOADING', isLoading} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalCount} as const),\n    setCurrentPage: (pageNumber: number) => ({type: 'SET_CURRENT_PAGE', pageNumber} as const),\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const)\n}\n\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleIsLoading(true))\n            dispatch(actions.setCurrentPage(currentPage))\n            dispatch(actions.setFilter(filter))\n            const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n            dispatch(actions.toggleIsLoading(false))\n            dispatch(actions.setUsers(data.items))\n            dispatch(actions.setTotalUsersCount(data.totalCount))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleFollowingProgress(true, userId))\n            const data = await usersAPI.follow(userId)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.followSuccess(userId))\n                await dispatch(getFriendsList())\n            }\n            dispatch(actions.toggleFollowingProgress(false, userId))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleFollowingProgress(true, userId))\n            const data = await usersAPI.unfollow(userId)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.unfollowSuccess(userId))\n                await dispatch(getFriendsList())\n            }\n            dispatch(actions.toggleFollowingProgress(false, userId))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default usersReducer\n","export type ChatMessageAPIType = {\n\tmessage: string\n\tphoto: string\n\tuserId: number\n\tuserName: string\n}\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\ntype EventsNamesTypes = 'message-received' | 'status-changed'\nexport type StatusType = 'Pending' | 'Ready' | 'Error'\n\nconst subscribers = {\n\t'message-received': [] as MessagesReceivedSubscriberType[],\n\t'status-changed': [] as StatusChangedSubscriberType[]\n}\nlet ws: WebSocket | null\n\nconst closeHandler = () => {\n\tnotifySubscribers('Pending')\n\tsetTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n\tconst newMessages = JSON.parse(e.data)\n\tsubscribers['message-received'].forEach(subscriber => subscriber(newMessages))\n}\nconst openHandler = () => {\n\tnotifySubscribers('Ready')\n}\nconst errorHandler = () => {\n\tnotifySubscribers('Error')\n}\nconst cleanUp = () => {\n\tws?.removeEventListener('close', closeHandler)\n\tws?.removeEventListener('message', messageHandler)\n\tws?.removeEventListener('open', openHandler)\n\tws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribers = (status: StatusType) => {\n\tsubscribers['status-changed'].forEach(subscriber => subscriber(status))\n}\nconst createChannel = () => {\n\tcleanUp()\n\tws?.close()\n\tws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n\tnotifySubscribers('Pending')\n\tws?.addEventListener('close', closeHandler)\n\tws?.addEventListener('message', messageHandler)\n\tws?.addEventListener('open', openHandler)\n\tws?.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n\tstart() {\n\t\tcreateChannel()\n\t},\n\n\tstop() {\n\t\tsubscribers['message-received'] = []\n\t\tsubscribers['status-changed'] = []\n\t\tcleanUp()\n\t\tws?.close()\n\t},\n\n\tsubscribe(eventName: EventsNamesTypes, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n\t\t// @ts-ignore\n\t\tsubscribers[eventName].push(callback)\n\t\treturn () => {\n\t\t\t// @ts-ignore\n\t\t\tsubscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback)\n\t\t}\n\t},\n\n\tunsubscribe(eventName: EventsNamesTypes, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n\t\t// @ts-ignore\n\t\tsubscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback)\n\t},\n\n\tsendMessage(message: string) {\n\t\tws?.send(message)\n\t}\n}\n","import {action} from './errorReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../../api/chatApi'\nimport {Dispatch} from 'redux'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof  initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nconst initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'Pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages\n                    .map( m => ( {...m, id: v1()} ) )]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n\n        case 'CLEAR_MESSAGES':\n            return {\n                ...state,\n                messages: action.payload.messages\n            }\n\n        case 'STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({type: 'MESSAGES_RECEIVED', payload: {messages}} as const),\n    statusChanged: (status: StatusType) => ({type: 'STATUS_CHANGED', payload: {status}} as const),\n    clearMessages: (messages: ChatMessageType[]) => ({type: 'CLEAR_MESSAGES', payload: {messages}} as const)\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.start()\n            chatAPI.subscribe('message-received', newMessageHandlerCreator(dispatch))\n            chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const stopMessagesListening = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.unsubscribe('message-received', newMessageHandlerCreator(dispatch))\n            chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n            chatAPI.stop()\n            dispatch(actions.clearMessages([]))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const sendMessage = (message: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.sendMessage(message)\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default chatReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__1Af0M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__OQwvZ\"};","import {getAuthUserData} from './authReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {action} from './errorReducer'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    initialized: false\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'INITIALIZED':\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'INITIALIZED'} as const)\n}\n\nexport const initializeApp = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const promise = dispatch(getAuthUserData())\n\n            Promise.all([promise]).then(() => {\n                dispatch(actions.initializedSuccess())\n            })\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default appReducer\n","import React, {ComponentType} from 'react'\nimport Loading from '../components/common/loading/Loading'\n\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\n    return (props: WCP) => {\n        return (\n            <React.Suspense fallback={<Loading />}>\n                <WrappedComponent {...props} />\n            </React.Suspense>\n        )\n    }\n}\n","export default __webpack_public_path__ + \"static/media/vk.e9553eae.svg\";","export default __webpack_public_path__ + \"static/media/github.9544f549.svg\";","import React, {FC} from 'react'\nimport footerClasses from './footer.module.css'\nimport vkIcon from './../../assets/img/vk.svg'\nimport githubIcon from './../../assets/img/github.svg'\n\nconst Footer: FC = () => {\n    return (\n        <footer className={footerClasses.footer}>\n\n            <div className={footerClasses.leftCol}>\n                <ul>\n                    <li>\n                        <a href=\"https://vk.com/maxim.abuzarov\" target='_blank' rel=\"noreferrer\">\n                            <img src={vkIcon} alt=\"VK icon\"/>\n                            <span>VK</span>\n                        </a>\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        <a href=\"https://github.com/maxim-abuzarov\" target='_blank' rel=\"noreferrer\">\n                            <img src={githubIcon} alt=\"Github icon\"/>\n                            <span>GitHub</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n\n            <div className={footerClasses.rightCol}>\n                <p>\t&copy; Abuzarov Maxim, 2021</p>\n            </div>\n\n        </footer>\n    )\n}\n\nexport default Footer\n","export default __webpack_public_path__ + \"static/media/profile.d54ae6c5.svg\";","export default __webpack_public_path__ + \"static/media/messages.4a3a2c6a.svg\";","export default __webpack_public_path__ + \"static/media/users.9c5d22db.svg\";","export default __webpack_public_path__ + \"static/media/chat.d2e37373.svg\";","import React, {FC} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport friendClasses from './friend.module.css'\nimport avatar from './../../../assets/img/unknownUser.jpeg'\n\ntype PropsType = {\n    id: number\n    name: string\n    url: string | null\n}\n\nconst Friend: FC<PropsType> = ({id, name, url}) => {\n    return (\n        <NavLink to={'/profile/' + id} className={friendClasses.friend}>\n\n            <div className={friendClasses.name}>\n\n                {name.toLowerCase()}\n\n            </div>\n\n            <div className={friendClasses.photo}>\n\n                <img src={url ? url : avatar} alt='Friend avatar'/>\n\n            </div>\n\n        </NavLink>\n    )\n}\n\nexport default Friend\n","import {AppStateType} from '../store'\n\nexport const getFriends = (state: AppStateType) => {\n\treturn state.aside.friends\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n\treturn state.aside.isLoading\n}\n","import React, {FC, useEffect} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport navigationClasses from './navigation.module.css'\nimport profileIcon from './../../assets/img/profile.svg'\nimport messagesIcon from './../../assets/img/messages.svg'\nimport usersIcon from './../../assets/img/users.svg'\nimport chatIcon from './../../assets/img/chat.svg'\nimport Friend from './friends/Friend'\nimport Loading from '../common/loading/Loading'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {getFriends, getIsLoading} from '../../redux/selectors/navigationSelectors'\nimport {getFriendsList} from '../../redux/reducers/asideReducer'\n\nconst Navigation: FC = () => {\n    const friends = useSelector(getFriends)\n    const isLoading = useSelector(getIsLoading)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const getFriend = () => {\n            dispatch(getFriendsList())\n        }\n        dispatch(getFriend)\n    }, [dispatch])\n\n    let friendsList = friends.map(friend => <Friend\n        key={friend.id}\n        id={friend.id}\n        name={friend.name}\n        url={friend.photos.large}\n    />)\n\n    return (\n        <nav className={navigationClasses.navigation}>\n            <ul>\n\n                <li>\n                    <NavLink to=\"/profile\" activeClassName={navigationClasses.active}>\n                        <img src={profileIcon} alt=\"Profile icon\"/>\n                        <span>Profile</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/messages\" activeClassName={navigationClasses.active}>\n                        <img src={messagesIcon} alt=\"Messages icon\"/>\n                        <span>Messages</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/users\" activeClassName={navigationClasses.active}>\n                        <img src={usersIcon} alt=\"Users icon\"/>\n                        <span>Users</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/chat\" activeClassName={navigationClasses.active}>\n                        <img src={chatIcon} alt=\"Chat icon\"/>\n                        <span>Chat</span>\n                    </NavLink>\n                </li>\n\n            </ul>\n\n            <div className={navigationClasses.friendsBlock}>\n\n                <div>\n                    <h1>Friends</h1>\n                </div>\n\n                <div className={navigationClasses.friends}>\n                    {isLoading\n                        ? <Loading />\n                        : friendsList.length !== 0\n                            ? friendsList\n                            : 'Follow somebody'\n                    }\n                </div>\n\n            </div>\n        </nav>\n    )\n}\n\nexport default Navigation\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\n\ntype PropsType = {\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatus: FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        if (props.isOwner) {\n            setEditMode(true)\n        }\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => {\n        e.target.select()\n    }\n\n    return (\n        <div>\n            {editMode\n                ?   <div> <input onBlur={deactivateEditMode}\n                                 autoFocus={true}\n                                 onFocus={handleFocus}\n                                 onChange={onStatusChange}\n                                 value={status} />\n                    </div>\n                :   <div onClick={activateEditMode}> {props.status\n                            ? props.status\n                            : 'There could be a status here, but...'}\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus\n","import React, {FC} from 'react'\nimport {Input, Textarea} from '../../../common/formsControl/FormsControl'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport formControlClasses from '../../../common/formsControl/formscontol.module.css'\nimport profileClasses from '../profile.module.css'\nimport {ProfileType} from '../../../../types/types'\n\ntype PropsType = {\n    profile: ProfileType\n}\n\nconst ProfileInfoForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\n                                                                                        handleSubmit,\n                                                                                        profile,\n                                                                                        error\n}) => {\n    return (\n        <form onSubmit={handleSubmit} className={profileClasses.data}>\n            <div className={profileClasses.dataItemName}>\n                <h1>Full Name:</h1>\n                <Field component={Input} name='fullName' placeholder='Full Name' className={profileClasses.field} />\n            </div>\n\n            <div className={profileClasses.dataItemCheck}>\n                <h1>Looking for a job:</h1>\n                <Field component={Input} name='lookingForAJob' type='checkbox'/>\n            </div>\n\n            <div className={profileClasses.dataItemField}>\n                <h1>Professional skills:</h1>\n                <Field component={Textarea} name='lookingForAJobDescription' placeholder='Professional skills' className={profileClasses.fieldText} />\n            </div>\n\n            <div className={profileClasses.dataItemField}>\n                <h1>About me:</h1>\n                <Field component={Textarea} name='aboutMe' placeholder='About me' className={profileClasses.fieldText} />\n            </div>\n\n            <div className={profileClasses.dataItemContacts}>\n                <h1>Contacts:</h1>\n                {Object.keys(profile.contacts).map(key => {\n                    return <div key={key} className={profileClasses.contacts}>\n                        <h2>{key}:</h2>\n                        <Field component={Input} name={'contacts.' + key} placeholder={key} className={profileClasses.social}/>\n                    </div>\n                })}\n            </div>\n\n            {error && <div className={formControlClasses.formSummaryError}>{error}</div>}\n\n            <div className={profileClasses.button}>\n                <button>Save</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<ProfileType, PropsType>({form: 'editProfile'})(ProfileInfoForm)\n","import React, {ChangeEvent, FC, useState} from 'react'\nimport profileClasses from './profile.module.css'\nimport avatar from './../../../assets/img/unknownUser.jpeg'\nimport Loading from '../../common/loading/Loading'\nimport ProfileStatus from './status/ProfileStatus'\nimport ProfileInfoForm from './info/ProfileInfoForm'\nimport {ProfilePropsType} from '../Content'\nimport {ContactsType, ProfileType} from '../../../types/types'\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Profile: FC<ProfilePropsType> = ({\n                                           profile,\n                                           savePhoto,\n                                           saveProfileData,\n                                           isOwner,\n                                           status,\n                                           updateStatus\n}) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <div className={profileClasses.profileLoading}>\n            <Loading />\n        </div>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        saveProfileData(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <div className={profileClasses.profile}>\n\n            <div className={profileClasses.photo}>\n                <img src={profile.photos.large ? profile.photos.large : avatar} alt=\"Profile avatar\"/>\n                {isOwner\n                && <div className={profileClasses.upload}>\n                        <button>Add photo</button>\n                        <input type=\"file\" onChange={onMainPhotoSelected}/>\n                   </div>\n                }\n            </div>\n\n            <div className={profileClasses.info}>\n                <h2>{profile.fullName ? profile.fullName : 'Name'}</h2>\n\n                <div className={profileClasses.status}>\n                    <ProfileStatus status={status} isOwner={isOwner} updateStatus={updateStatus} />\n                </div>\n\n                {editMode\n                    ? <ProfileInfoForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileInfo profile={profile} isOwner={isOwner} goToEditMode={() => {setEditMode(true)}} />\n                }\n\n            </div>\n\n        </div>\n    )\n}\n\nconst ProfileInfo: FC<ProfileInfoType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div className={profileClasses.data}>\n            <div className={profileClasses.dataItem}>\n                <h1>Looking for a job: </h1>\n                <p>{profile.lookingForAJob ? 'Yes' : 'No'}</p>\n            </div>\n\n            <div className={profileClasses.dataItem}>\n                <h1>Professional skills:</h1>\n                <p>{profile.lookingForAJobDescription}</p>\n            </div>\n\n            <div className={profileClasses.dataItem}>\n                <h1>About me: </h1>\n                <p>{profile.aboutMe}</p>\n            </div>\n\n            <div className={profileClasses.dataItemContacts}>\n                <h1>Contacts:</h1>\n                {Object\n                    .keys(profile.contacts)\n                    .map((key => {return <Contacts\n                        key={key}\n                        contactTitle={key}\n                        contactValue={profile.contacts[key as keyof ContactsType]} />}))\n                }\n            </div>\n\n            {isOwner &&\n            <div className={profileClasses.button}>\n                <button onClick={goToEditMode}>Edit</button>\n            </div>\n            }\n\n        </div>\n    )\n}\n\nconst Contacts: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div>\n            {contactValue && <div className={profileClasses.contacts}>\n                <h2>{contactTitle\n                    ? contactValue && contactTitle\n                    : null}\n                </h2>\n                <a href={contactValue} target='_blank' rel=\"noreferrer\">{contactValue}</a>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default Profile\n","import {PhotosType, ProfileType} from '../types/types'\nimport {instance, APIResponseType} from './api'\n\ntype SavePhotoResponseType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status/`, {status: status})\n            .then(response => {\n                return response.data\n            })\n    },\n\n    savePhoto(photoFile: File) {\n        const formData = new FormData()\n        formData.append('image', photoFile)\n\n        return instance.put<APIResponseType<SavePhotoResponseType>>(`profile/photo`, formData)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    saveProfileData(profileData: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profileData).then(response => {\n            return response.data\n        })\n    }\n}\n","import avatar from './../../assets/img/unknownUser.jpeg'\nimport {stopSubmit} from 'redux-form'\nimport {action} from './errorReducer'\nimport {PhotosType, PostType, ProfileType} from '../../types/types'\nimport {profileAPI} from '../../api/profileAPI'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {ResultCodes} from '../../api/api'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit> | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    postsData: [] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'ADD_POST':\n            let newPost = {\n                id: v1(),\n                author: 'Maxim Abuzarov',\n                date: '30 Aug 2021',\n                title: 'Post #1',\n                url: avatar,\n                text: action.newPostText\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost]\n            }\n\n        case 'SET_USER_PROFILE':\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        case 'SET_STATUS':\n            return {\n                ...state,\n                status: action.status\n            }\n\n        case 'SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.getProfile(userId)\n            dispatch(actions.setUserProfile(data))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const getStatus = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.getStatus(userId)\n            dispatch(actions.setStatus(data))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const updateStatus = (status: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.updateStatus(status)\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.setStatus(status))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.savePhoto(file)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.savePhotoSuccess(data.data.photos))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const saveProfileData = (profileData: ProfileType): ThunkType => {\n    return async (dispatch, getState) => {\n        try {\n            const userId = getState().auth.userId\n            const data = await profileAPI.saveProfileData(profileData)\n\n            if (data.resultCode === ResultCodes.Success) {\n                if (userId !== null) {\n                    await dispatch(getUserProfile(userId))\n                } else {\n                    const message = `User's id can't be null`\n                    dispatch(action.catchError(true, message))\n                }\n            } else {\n                dispatch(stopSubmit('editProfile', {_error: data.messages[0]}))\n\n                return Promise.reject(data.messages[0])\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default profileReducer\n","import React, {FC} from 'react'\nimport postClasses from './post.module.css'\n\ntype PropsType = {\n    url: string | undefined\n    author: string\n    date: string\n    title: string\n    text: string\n}\n\nconst Post: FC<PropsType> = ({url, author, date, title, text}) => {\n    return (\n        <div className={postClasses.post}>\n            <div className={postClasses.header}>\n\n                <div className={postClasses.left}>\n                    <img src={url} alt=\"Author avatar\"/>\n                </div>\n\n                <div className={postClasses.author}>\n                    <h4>{author}</h4>\n                    <p>{date}</p>\n                </div>\n\n            </div>\n\n            <div className={postClasses.content}>\n                <h2>{title}</h2>\n                <p>{text}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n","import {maxLengthCreator, requiredField} from '../../../../utils/validators/validators'\nimport {Field, FormAction, InjectedFormProps, reduxForm, reset} from 'redux-form'\nimport {Textarea} from '../../../common/formsControl/FormsControl'\nimport React, {FC} from 'react'\nimport { NewPostValuesFormType } from '../Posts'\n\ntype PropsType = {}\n\nconst maxLength30 = maxLengthCreator(30) // create validator of max length\nconst afterSubmit = (result: any, dispatch: (arg0: FormAction) => any) => dispatch(reset('postForm'))\n\nconst PostForm: FC<InjectedFormProps<NewPostValuesFormType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field name='newPostText' component={Textarea} placeholder='Add your post' validate={[requiredField, maxLength30]} />\n            <div><button>Add</button></div>\n        </form>\n    )\n}\n\nexport const AddPostForm = reduxForm<NewPostValuesFormType, PropsType>({form: 'postForm', onSubmitSuccess: afterSubmit})(PostForm)\n","import React, {FC} from 'react'\nimport postsClasses from './posts.module.css'\nimport Post from './post/Post'\nimport {AddPostForm} from './addPostForm/AddPostForm'\nimport {PostType} from '../../../types/types'\n\nexport type NewPostValuesFormType = {\n    newPostText: string\n}\nexport type MapPropsType = {\n    posts: PostType[]\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\ntype PropsType = MapPropsType & DispatchPropsType\n\nconst Posts: FC<PropsType> = (props) => {\n    let posts = [...props.posts]\n        .reverse()\n        .map(post => <Post\n        key={post.id}\n        author={post.author}\n        date={post.date}\n        title={post.title}\n        text={post.text}\n        url={post.url}\n    />)\n\n    let addPost = (values: NewPostValuesFormType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={postsClasses.posts}>\n            <div>\n                <h1>Add post</h1>\n            </div>\n\n            <div className={postsClasses.addPost}>\n                <AddPostForm onSubmit={addPost} />\n            </div>\n\n            {posts}\n        </div>\n    )\n}\n\nexport default Posts\n","import {actions} from '../../../redux/reducers/profileReducer'\nimport Posts, {DispatchPropsType, MapPropsType} from './Posts'\nimport {connect} from 'react-redux'\nimport {AppStateType} from '../../../redux/store'\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.postsData,\n    }\n}\n\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps,\n    {addPost: actions.addPost}\n) (Posts)\n","import React, {FC} from 'react'\nimport Profile from './profile/Profile'\nimport PostsContainer from './posts/PostsContainer'\nimport {ProfileType} from '../../types/types'\n\nexport type ProfilePropsType = {\n    profile: ProfileType | null\n    saveProfileData: (profile: ProfileType) => Promise<any>\n    savePhoto: (file: File) => void\n    isOwner: boolean\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Content: FC<ProfilePropsType> = ({\n                                           profile,\n                                           saveProfileData,\n                                           savePhoto,\n                                           isOwner,\n                                           status,\n                                           updateStatus\n}) => {\n    return (\n        <aside>\n\n            <Profile profile={profile}\n                     saveProfileData={saveProfileData}\n                     savePhoto={savePhoto}\n                     isOwner={isOwner}\n                     status={status}\n                     updateStatus={updateStatus} />\n\n            <PostsContainer />\n\n        </aside>\n    )\n}\n\nexport default Content\n","import React, {ComponentType} from 'react'\nimport Content from './Content'\nimport {connect} from 'react-redux'\nimport {getStatus, getUserProfile, savePhoto, saveProfileData, updateStatus} from '../../redux/reducers/profileReducer'\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\nimport {compose} from 'redux'\nimport {AppStateType} from '../../redux/store'\nimport {ProfileType} from '../../types/types'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (text: string) => void\n    savePhoto: (file: File) => void\n    saveProfileData: (profile: ProfileType) => Promise<any>\n}\ntype PathParamsType = {\n    userId: string\n}\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ContentContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId as number)\n        this.props.getStatus(userId as number)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return <Content\n            {...this.props}\n            profile={this.props.profile}\n            saveProfileData={this.props.saveProfileData}\n            savePhoto={this.props.savePhoto}\n            isOwner={!this.props.match.params.userId}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n        />\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfileData})\n)(ContentContainer)\n","export default __webpack_public_path__ + \"static/media/logo.224ee00a.svg\";","import React from 'react'\nimport logo from './../../assets/img/logo.svg'\nimport headerClasses from './header.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {FC} from 'react'\n\nexport type MapPropsTypes = {\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\nexport type DispatchPropsTypes = {\n    logout: () => void\n}\n\nconst Header: FC<MapPropsTypes & DispatchPropsTypes> = ({isAuth, login, logout}) => {\n    return (\n        <header className={headerClasses.header}>\n\n            <div className={headerClasses.logotype}>\n                <NavLink to='/profile'>\n                    <img src={logo} alt=\"M logotype\"/>\n                </NavLink>\n            </div>\n\n            <div className={headerClasses.login}>\n                {isAuth\n                    ? <h1>{login} <button className={headerClasses.logout} onClick={logout}>Logout</button></h1>\n                    : <NavLink to='/login'>Login</NavLink>\n                }\n            </div>\n\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Header, {DispatchPropsTypes, MapPropsTypes} from './Header'\nimport {connect} from 'react-redux'\nimport {logout} from '../../redux/reducers/authReducer'\nimport {AppStateType} from '../../redux/store'\n\nclass HeaderContainer extends React.Component<MapPropsTypes & DispatchPropsTypes> {\n    render() {\n        return <Header {...this.props} />\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect(mapStateToProps,\n    {logout}\n) (HeaderContainer)\n","import React, {FC} from 'react'\nimport errorClasses from './error.module.css'\n\ntype PropsType = {\n    errorMessage: string | null\n}\n\nconst Error: FC<PropsType> = ({errorMessage}) => {\n    return (\n        <div className={errorClasses.error}>\n            <p>{errorMessage}</p>\n        </div>\n    )\n}\n\nexport default Error\n","import {Action, applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport {reducer as formReducer} from 'redux-form'\nimport profileReducer from './reducers/profileReducer'\nimport messagesReducer from './reducers/messagesReducer'\nimport asideReducer from './reducers/asideReducer'\nimport usersReducer from './reducers/usersReducer'\nimport authReducer from './reducers/authReducer'\nimport appReducer from './reducers/appReducer'\nimport errorReducer from './reducers/errorReducer'\nimport chatReducer from './reducers/chatReducer'\n\n// types for all app state\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types for actions\nexport type InferActionTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\n// types for thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: messagesReducer,\n    aside: asideReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    error: errorReducer,\n    chat: chatReducer,\n    form: formReducer\n})\n\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport default store\n","import React, {ComponentType, FC} from 'react'\nimport {compose} from 'redux'\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport {connect, Provider} from 'react-redux'\nimport {initializeApp} from './redux/reducers/appReducer'\nimport {withSuspense} from './hoc/withSuspense'\nimport './App.css'\nimport Footer from './components/footer/Footer'\nimport Navigation from './components/navigation/Navigation'\nimport ContentContainer from './components/content/ContentContainer'\nimport HeaderContainer from './components/header/HeaderContainer'\nimport Loading from './components/common/loading/Loading'\nimport Error from './components/common/error/Error'\nimport store, {AppStateType} from './redux/store'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\n// components for lazy loading\nconst MessagesContainer = React.lazy(() => import('./components/messages/MessagesContainer'))\nconst Users = React.lazy(() => import('./components/users/Users'))\nconst LoginPage = React.lazy(() => import('./components/login/Login'))\nconst ChatPage = React.lazy(() => import('./pages/chat/ChatPage'))\n\nconst SuspendedMessagesPage = withSuspense(MessagesContainer)\nconst SuspendedUsersPage = withSuspense(Users)\nconst SuspendedLoginPage = withSuspense(LoginPage)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loading />\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer />\n                {this.props.error && <Error errorMessage={this.props.errorMessage}/>}\n                <Navigation />\n                <div className='app-content'>\n                    <Switch>\n                        <Route exact path='/' render={ () => <Redirect to='/profile' />} />\n                        <Route path='/profile/:userId?' render={ () => <ContentContainer /> }/>\n                        <Route path='/messages' render={ () => <SuspendedMessagesPage />}/>\n                        <Route path='/users' render={ () => <SuspendedUsersPage />}/>\n                        <Route path='/login' render={ () => <SuspendedLoginPage />}/>\n                        <Route path='/chat' render={ () => <SuspendedChatPage />}/>\n                        <Route path='*' render={ () => <div className='page404'>404 :(</div> }/>\n                    </Switch>\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.error.error,\n        errorMessage: state.error.errorMessage\n    }\n}\n\nconst AppContainer =  compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n) (App)\n\nconst SocialNetworkApp: FC = () => {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    )\n}\n\nexport default SocialNetworkApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SocialNetworkApp from './App'\n\nReactDOM.render(<SocialNetworkApp />, document.getElementById('root'))\n","import React, {FC} from 'react'\nimport loadingClasses from './loading.module.css'\n\nconst Loading: FC = () => {\n    return (\n        <div className={loadingClasses.loading}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n}\n\nexport default Loading\n","import React, {FC} from 'react'\nimport formControlClasses from './formscontol.module.css'\nimport {WrappedFieldProps} from 'redux-form'\n\nexport const Textarea: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={formControlClasses.formControl + ' ' + (hasError ? formControlClasses.error : '')}>\n            <textarea {...input} {...props} />\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Input: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={formControlClasses.formControl + ' ' + (hasError ? formControlClasses.error : '')}>\n            <input {...input} {...props} />\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"navigation_navigation__unRcd\",\"active\":\"navigation_active__3_qnU\",\"friendsBlock\":\"navigation_friendsBlock__E3nj3\",\"friends\":\"navigation_friends__2ayIw\"};","import {action} from './errorReducer'\nimport {UserType} from '../../types/types'\nimport {usersAPI} from '../../api/usersAPI'\nimport {BaseThunkType, InferActionTypes} from '../store'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    friends: [] as UserType[],\n    isLoading: false\n}\n\nconst asideReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'GET_FRIENDS':\n            return {\n                ...state,\n                friends: action.friends\n            }\n\n        case 'TOGGLE_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    getFriends: (friends: UserType[]) => ({type: 'GET_FRIENDS', friends} as const),\n    toggleIsLoading: (isLoading: boolean) => ({type: 'TOGGLE_IS_LOADING', isLoading} as const)\n}\n\nexport const getFriendsList = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleIsLoading(true))\n            const data = await usersAPI.getFriends()\n            dispatch(actions.toggleIsLoading(false))\n            dispatch(actions.getFriends(data.items))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default asideReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formscontol_formControl__3GBCo\",\"error\":\"formscontol_error__3T9u-\",\"formSummaryError\":\"formscontol_formSummaryError__ulmBQ\"};","export default __webpack_public_path__ + \"static/media/unknownUser.6cf2a92e.jpeg\";","import {instance, APIResponseType, ResultCodes, ResultCodesForCaptcha} from './api'\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\n            .then(response => response.data)\n    },\n\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodes | ResultCodesForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(response => response.data)\n    },\n\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(response => {\n                return response.data\n            }) as Promise<APIResponseType>\n    }\n}\n","import {instance} from './api'\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\n            .then(response => {\n                return response.data\n            })\n    }\n}\n","import {ResultCodes, ResultCodesForCaptcha} from '../../api/api'\nimport {stopSubmit} from 'redux-form'\nimport {action} from './errorReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {authAPI} from '../../api/authAPI'\nimport {securityAPI} from '../../api/securityAPI'\n\ntype InitialStateType = typeof  initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit> | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    userId: null as null | number,\n    email: null as null | string,\n    login: null as null | string,\n    captchaUrl: null as null | string,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_USER_DATA':\n        case 'GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SET_USER_DATA',\n        payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\n}\n\nexport const getAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.authMe()\n\n            if (data.resultCode === ResultCodes.Success) {\n                const {id, login, email} = data.data\n                dispatch(actions.setAuthUserData(id, email, login, true))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.login(email, password, rememberMe, captcha)\n\n            if (data.resultCode === ResultCodes.Success) {\n                await dispatch(getAuthUserData())\n            } else {\n                if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\n                    await dispatch(getCaptchaUrl())\n                }\n                const message = data.messages.length > 0 ? data.messages[0] : 'Wrong data'\n\n                dispatch(stopSubmit('login', {_error: message}))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await securityAPI.getCaptchaUrl()\n            const captchaUrl = data.url\n            dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const logout = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.logout()\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.setAuthUserData(null, null, null, false))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default authReducer\n","import {GetItemsType, instance, APIResponseType} from './api'\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 12, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getFriends() {\n        return instance.get<GetItemsType>(`users?friend=true`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    isFollow(userId: number) {\n        return instance.get<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                debugger\n                return response.data\n            })\n    },\n\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(response => {\n            return response.data\n        }) as Promise<APIResponseType>\n    }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__1jCQ3\",\"header\":\"post_header__2t5cH\",\"left\":\"post_left__1q5zG\",\"author\":\"post_author__1OlPZ\",\"content\":\"post_content__QUk1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__v9FKw\",\"logotype\":\"header_logotype__3t_N6\",\"login\":\"header_login__3v_4I\",\"logout\":\"header_logout__1MXam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__1lZIc\",\"leftCol\":\"footer_leftCol__-Ohmk\",\"rightCol\":\"footer_rightCol__3BfnC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"friend_friend__1bWIq\",\"photo\":\"friend_photo__2cFYB\",\"name\":\"friend_name__3gArK\"};","import axios from 'axios'\nimport {UserType} from '../types/types'\n\nexport type GetItemsType = {\n    items: UserType[]\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodes> = {\n    data: D\n    messages: string[]\n    resultCode: RC\n}\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': 'a60e2925-9e48-4e88-a8f4-0ca5f14206c3'\n    }\n})\nexport enum ResultCodes {\n    Success = 0,\n    Error = 1\n}\nexport enum ResultCodesForCaptcha {\n    CaptchaIsRequired = 10\n}\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const requiredField: FieldValidatorType = (value) => {\n    if (value) {\n        return undefined\n    }\n\n    return 'Required field'\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`\n    }\n\n    return undefined\n}\n"],"sourceRoot":""}