{"version":3,"sources":["components/login/login.module.css","components/login/Login.tsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","className","loginClasses","login","component","Input","validate","requiredField","name","placeholder","type","password","checkbox","id","htmlFor","formControlClasses","formSummaryError","src","alt","captcha","button","connect","state","isAuth","auth","to","wrapper","formData","email","rememberMe"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,SAAW,wBAAwB,SAAW,wBAAwB,OAAS,sBAAsB,QAAU,yB,iCCD/L,oHAgEMC,EAAiBC,YAAkD,CACrEC,KAAM,SADaD,EApC8E,SAAC,GAI/F,IAHmGE,EAGpG,EAHoGA,aACAC,EAEpG,EAFoGA,MACAC,EACpG,EADoGA,WAEtG,OACI,uBAAMC,SAAUH,EAAhB,UAEI,qBAAKI,UAAWC,IAAaC,MAA7B,SACI,cAAC,IAAD,CAAOC,UAAWC,IAAOC,SAAU,CAACC,KAAgBC,KAAK,QAAQC,YAAY,QAAQC,KAAK,YAG9F,qBAAKT,UAAWC,IAAaS,SAA7B,SACI,cAAC,IAAD,CAAOP,UAAWC,IAAOC,SAAU,CAACC,KAAgBC,KAAK,WAAWC,YAAY,WAAWC,KAAK,eAGpG,sBAAKT,UAAWC,IAAaU,SAA7B,UACI,cAAC,IAAD,CAAOR,UAAWC,IAAOG,KAAK,aAAaE,KAAK,WAAWG,GAAG,UAC9D,uBAAOC,QAAQ,QAAf,4BAGHhB,GACM,sBAAKG,UAAWc,IAAmBC,iBAAnC,cAAuDlB,EAAvD,OAGNC,GAAc,qBAAKkB,IAAKlB,EAAYmB,IAAI,UAAUjB,UAAWC,IAAaiB,UAC1EpB,GAAc,qBAAKE,UAAWC,IAAaC,MAA7B,SAAoC,cAAC,IAAD,CAAOC,UAAWC,IAAOC,SAAU,CAACC,KAAgBC,KAAK,UAAUC,YAAY,oBAElI,qBAAKR,UAAWC,IAAakB,OAA7B,SACI,oDAkCDC,uBAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBxB,WAAYuB,EAAME,KAAKzB,cAIS,CAACI,WAA1BkB,EAvBqC,SAAC,GAAiC,IAAhClB,EAA+B,EAA/BA,MAAOoB,EAAwB,EAAxBA,OAAQxB,EAAgB,EAAhBA,WAKjE,OAAIwB,EACO,cAAC,IAAD,CAAUE,GAAG,aAIpB,qBAAKxB,UAAWC,IAAawB,QAA7B,SACI,cAAChC,EAAD,CAAgBM,SAVP,SAAC2B,GACdxB,EAAMwB,EAASC,MAAOD,EAAShB,SAAUgB,EAASE,WAAYF,EAASR,UAS/BpB,WAAYA","file":"static/js/6.4ff92d49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"login_wrapper__3WAPi\",\"login\":\"login_login__19aQM\",\"password\":\"login_password__1rfQ2\",\"checkbox\":\"login_checkbox__Z0uto\",\"button\":\"login_button__Fi6x4\",\"captcha\":\"login_captcha__30iGv\"};","import React, {FC} from 'react'\nimport loginClasses from './login.module.css'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {Input} from '../common/formsControl/FormsControl'\nimport {requiredField} from '../../utils/validators/validators'\nimport {connect} from 'react-redux'\nimport {login} from '../../redux/reducers/authReducer'\nimport {Redirect} from 'react-router-dom'\nimport formControlClasses from './../common/formsControl/formscontol.module.css'\nimport {AppStateType} from '../../redux/store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\ntype MapPropsType = {\n    captchaUrl: string | null\n    isAuth: boolean\n}\ntype DispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\n                                                                                                          handleSubmit,\n                                                                                                          error,\n                                                                                                          captchaUrl\n}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            \n            <div className={loginClasses.login}>\n                <Field component={Input} validate={[requiredField]} name='email' placeholder='email' type='email' />\n            </div>\n            \n            <div className={loginClasses.password}>\n                <Field component={Input} validate={[requiredField]} name='password' placeholder='password' type='password' />\n            </div>\n            \n            <div className={loginClasses.checkbox}>\n                <Field component={Input} name='rememberMe' type='checkbox' id='check'/>\n                <label htmlFor=\"check\">Remember me</label>\n            </div>\n\n            {error\n                && <div className={formControlClasses.formSummaryError}> {error} </div>\n            }\n\n            {captchaUrl && <img src={captchaUrl} alt='Captcha' className={loginClasses.captcha}/>}\n            {captchaUrl && <div className={loginClasses.login}><Field component={Input} validate={[requiredField]} name='captcha' placeholder='Enter captcha' /></div>}\n\n            <div className={loginClasses.button}>\n                <button>Submit</button>\n            </div>\n            \n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n    form: 'login'\n}) (LoginForm)\n\nconst Login: FC<MapPropsType & DispatchPropsType> = ({login, isAuth, captchaUrl}) => {\n    const onSubmit = (formData: LoginFormValuesType) => {\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (isAuth) {\n        return <Redirect to='/profile' />\n    }\n\n    return (\n        <div className={loginClasses.wrapper}>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captchaUrl\n    }\n}\n\nexport default connect(mapStateToProps, {login})(Login)\n"],"sourceRoot":""}