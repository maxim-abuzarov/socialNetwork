{"version":3,"sources":["components/messages/messages.module.css","components/messages/message/message.module.css","components/messages/friend/friend.module.css","hoc/withAuthRedirect.tsx","components/messages/message/Message.tsx","components/messages/friend/Friend.tsx","components/messages/addMessageForm/addMessageForm.tsx","components/messages/Messages.tsx","components/messages/MessagesContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","Message","message","className","messageClasses","Friend","id","url","name","to","friendClasses","friends","friend","src","avatar","alt","maxLength300","maxLengthCreator","AddMessageForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","onSubmit","Field","component","Textarea","validate","requiredField","placeholder","Messages","messages","sendMessage","friendsList","map","photos","large","messagesList","messagesClasses","leftCol","length","rightCol","head","write","writeMessage","values","newMessageText","compose","connect","aside","messagesPage","messagesData","actions","WrappedComponent","props","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,0BAA0B,QAAU,0BAA0B,SAAW,2BAA2B,KAAO,uBAAuB,MAAQ,wBAAwB,aAAe,iC,oBCAnPD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,yB,+GCSzDC,EAAkB,SAACC,GAAD,MAA0B,CAC5CC,OAAQD,EAAME,KAAKD,S,gDCKRE,EARgB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC7B,OACI,qBAAKC,UAAWC,IAAeF,QAA/B,SACI,6BAAKA,O,kCCcFG,EAde,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,KACrC,OACI,cAAC,IAAD,CAASC,GAAI,eAAiBH,EAAIH,UAAWO,IAAcC,QAA3D,SACI,sBAAKR,UAAWO,IAAcE,OAA9B,UAEI,qBAAKC,IAAKN,GAAYO,IAAQC,IAAI,kBAElC,6BAAKP,U,0CCVfQ,EAAeC,YAAiB,KAazBC,EAAiBC,YAA+C,CAACC,KAAM,yBAA0BC,gBAZ1F,SAACC,EAAaC,GAAd,OAAsDA,EAASC,YAAM,6BAY3DL,EAVqE,SAAC,GAAoB,IAAnBM,EAAkB,EAAlBA,aACjG,OACI,uBAAMC,SAAUD,EAAhB,UACI,cAACE,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAef,GAAeR,KAAK,iBACnEwB,YAAY,iCACnB,gDCsDGC,EArDiB,SAAC,GAAsC,IAArCtB,EAAoC,EAApCA,QAASuB,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAC7CC,EAAczB,EAAQ0B,KAAI,SAAAzB,GAAM,OAAI,cAAC,EAAD,CAEpCJ,KAAMI,EAAOJ,KACbF,GAAIM,EAAON,GACXC,IAAKK,EAAO0B,OAAOC,OAHd3B,EAAON,OAMZkC,EAAeN,EAASG,KAAI,SAAAnC,GAAO,OAAI,cAAC,EAAD,CAEvCA,QAASA,EAAQA,SADZA,EAAQI,OAQjB,OACI,sBAAKH,UAAWsC,IAAgBP,SAAhC,UACI,sBAAK/B,UAAWsC,IAAgBC,QAAhC,UAEI,8BACI,2CAGJ,qBAAKvC,UAAWsC,IAAgB9B,QAAhC,SAC4B,IAAvByB,EAAYO,OACPP,EACA,uBAMd,sBAAKjC,UAAWsC,IAAgBG,SAAhC,UAEI,sBAAKzC,UAAWsC,IAAgBI,KAAhC,UACI,0CACCL,KAGL,qBAAKrC,UAAWsC,IAAgBK,MAAhC,SACI,qBAAK3C,UAAWsC,IAAgBM,aAAhC,SACI,cAAC7B,EAAD,CAAgBQ,SA9BhB,SAACsB,GACjBb,EAAYa,EAAOC,8BChBZC,sBACXC,aARoB,SAACrD,GACrB,MAAO,CACHa,QAASb,EAAMsD,MAAMzC,QACrBuB,SAAUpC,EAAMuD,aAAaC,gBAKR,CAACnB,YAAaoB,IAAQpB,eLF5C,SAA+BqB,GAQlC,OAAOL,YAA4DtD,EAAiB,GAA7EsD,EAPqC,SAACM,GACzC,IAAO1D,EAAwB0D,EAAxB1D,OAAW2D,EAAlB,YAA+BD,EAA/B,GACA,OAAK1D,EAEE,cAACyD,EAAD,eAAsBE,IAFT,cAAC,IAAD,CAAUjD,GAAG,gBKF1ByC,CAGbjB","file":"static/js/4.1d64d913.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"messages_messages__34oTo\",\"leftCol\":\"messages_leftCol__2X-SZ\",\"friends\":\"messages_friends__13UKv\",\"rightCol\":\"messages_rightCol__2RL9s\",\"head\":\"messages_head__30Yix\",\"write\":\"messages_write__tMJZB\",\"writeMessage\":\"messages_writeMessage__2KKT6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2zgqP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"friend_friends__1nQOj\",\"friend\":\"friend_friend__1Le-2\"};","import {Redirect} from 'react-router-dom'\nimport React, {ComponentType, FC} from 'react'\nimport {connect} from 'react-redux'\nimport {AppStateType} from '../redux/store'\n\ntype MapPropsType = {\n    isAuth: boolean\n}\ntype DispatchPropsType = {}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\n    const RedirectComponent: FC<MapPropsType> = (props) => {\n        const {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login'/>\n\n        return <WrappedComponent {...restProps as WCP} />\n    }\n\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToProps, {}) (RedirectComponent)\n}\n","import React from 'react'\nimport messageClasses from './message.module.css'\nimport { FC } from 'react'\n\ntype PropsType = {\n    message: string\n}\n\nconst Message: FC<PropsType> = ({message}) => {\n    return (\n        <div className={messageClasses.message}>\n            <h3>{message}</h3>\n        </div>\n    )\n}\n\nexport default Message\n","import React, {FC} from 'react'\nimport friendClasses from './friend.module.css'\nimport {NavLink} from 'react-router-dom'\nimport avatar from './../../../assets/img/unknownUser.jpeg'\n\ntype PropsType = {\n    id: number\n    url: string | null\n    name: string\n}\n\nconst Friend: FC<PropsType> = ({id, url, name}) => {\n    return (\n        <NavLink to={'/messages/id' + id} className={friendClasses.friends}>\n            <div className={friendClasses.friend}>\n\n                <img src={url ? url : avatar} alt='Friend avatar'/>\n\n                <h2>{name}</h2>\n\n            </div>\n        </NavLink>\n    )\n}\n\nexport default Friend\n","import React, {FC} from 'react'\nimport {Field, FormAction, InjectedFormProps, reduxForm, reset} from 'redux-form'\nimport {Textarea} from '../../common/formsControl/FormsControl'\nimport {maxLengthCreator, requiredField} from '../../../utils/validators/validators'\nimport {NewMessageValuesFormType} from '../Messages'\n\ntype PropsType = {}\n\nconst maxLength300 = maxLengthCreator(300) // create validator of max length\nconst afterSubmit = (result: any, dispatch: (arg0: FormAction) => any) => dispatch(reset('messagesAddMessageForm'))\n\nexport const MessageForm: FC<InjectedFormProps<NewMessageValuesFormType, PropsType> & PropsType> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field component={Textarea} validate={[requiredField, maxLength300]} name='newMessageText'\n                   placeholder='Write message to your friend'/>\n            <button>Send</button>\n        </form>\n    )\n}\n\nexport const AddMessageForm = reduxForm<NewMessageValuesFormType, PropsType>({form: 'messagesAddMessageForm', onSubmitSuccess: afterSubmit})(MessageForm)\n","import React, {FC} from 'react'\nimport messagesClasses from './messages.module.css'\nimport Message from './message/Message'\nimport Friend from './friend/Friend'\nimport {UserType} from '../../types/types'\nimport {MessagesType} from '../../redux/reducers/messagesReducer'\nimport {AddMessageForm} from './addMessageForm/addMessageForm'\n\ntype PropsType = {\n    friends: UserType[]\n    messages: MessagesType[]\n    sendMessage: (newMessageText: string) => void\n}\nexport type NewMessageValuesFormType = {\n    newMessageText: string\n}\n\nconst Messages: FC<PropsType> = ({friends, messages, sendMessage}) => {\n    let friendsList = friends.map(friend => <Friend\n        key={friend.id}\n        name={friend.name}\n        id={friend.id}\n        url={friend.photos.large}\n    />)\n\n    let messagesList = messages.map(message => <Message\n        key={message.id}\n        message={message.message}\n    />)\n\n    let addNewMessage = (values: NewMessageValuesFormType) => {\n        sendMessage(values.newMessageText)\n    }\n\n    return (\n        <div className={messagesClasses.messages}>\n            <div className={messagesClasses.leftCol}>\n\n                <div>\n                    <h1>Dialogs</h1>\n                </div>\n\n                <div className={messagesClasses.friends}>\n                    {friendsList.length !== 0\n                        ? friendsList\n                        : 'Follow somebody'\n                    }\n                </div>\n\n            </div>\n\n            <div className={messagesClasses.rightCol}>\n\n                <div className={messagesClasses.head}>\n                    <h1>Messages</h1>\n                    {messagesList}\n                </div>\n\n                <div className={messagesClasses.write}>\n                    <div className={messagesClasses.writeMessage}>\n                        <AddMessageForm onSubmit={addNewMessage} />\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Messages\n","import {actions} from '../../redux/reducers/messagesReducer'\nimport {connect} from 'react-redux'\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport {compose} from 'redux'\nimport {AppStateType} from '../../redux/store'\nimport Messages from './Messages'\nimport {ComponentType} from 'react'\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        friends: state.aside.friends,\n        messages: state.messagesPage.messagesData\n    }\n}\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {sendMessage: actions.sendMessage}),\n    withAuthRedirect,\n)(Messages)\n"],"sourceRoot":""}