{"version":3,"sources":["components/content/profile/profile.module.css","components/content/posts/posts.module.css","redux/reducers/errorReducer.ts","redux/reducers/messagesReducer.ts","api/chatApi.ts","redux/reducers/chatReducer.ts","components/common/loading/loading.module.css","components/common/error/error.module.css","redux/reducers/appReducer.ts","hoc/withSuspense.tsx","assets/img/vk.svg","assets/img/github.svg","components/footer/Footer.tsx","assets/img/profile.svg","assets/img/messages.svg","assets/img/users.svg","assets/img/chat.svg","components/navigation/friends/Friend.tsx","redux/selectors/navigationSelectors.ts","components/navigation/Navigation.tsx","components/content/profile/status/ProfileStatus.tsx","components/content/profile/info/ProfileInfoForm.tsx","components/content/profile/Profile.tsx","api/profileAPI.ts","redux/reducers/profileReducer.ts","components/content/posts/post/Post.tsx","components/content/posts/addPostForm/AddPostForm.tsx","components/content/posts/Posts.tsx","components/content/posts/PostsContainer.tsx","components/content/Content.tsx","components/content/ContentContainer.tsx","assets/img/logo.svg","components/header/Header.tsx","components/header/HeaderContainer.tsx","components/common/error/Error.tsx","redux/store.ts","App.tsx","index.tsx","components/common/loading/Loading.tsx","components/common/formsControl/FormsControl.tsx","components/navigation/navigation.module.css","redux/reducers/asideReducer.ts","components/common/formsControl/formscontol.module.css","api/usersAPI.ts","assets/img/unknownUser.jpeg","api/authAPI.ts","api/securityAPI.ts","redux/reducers/authReducer.ts","redux/reducers/usersReducer.ts","components/content/posts/post/post.module.css","components/header/header.module.css","components/footer/footer.module.css","components/navigation/friends/friend.module.css","api/api.ts","utils/validators/validators.ts"],"names":["module","exports","initialState","error","errorMessage","action","catchError","type","errorReducer","state","messagesData","actions","sendMessage","newMessageText","messagesReducer","newMessage","id","v1","message","ws","subscribers","closeHandler","notifySubscribers","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","subscriber","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","a","stopMessagesListening","chatReducer","map","m","index","array","length","initialized","appReducer","withSuspense","WrappedComponent","props","Suspense","fallback","Loading","Footer","className","footerClasses","footer","leftCol","href","target","rel","src","vkIcon","alt","githubIcon","rightCol","Friend","name","url","to","friendClasses","friend","toLowerCase","photo","avatar","getFriends","aside","friends","getIsLoading","isLoading","Navigation","useSelector","useDispatch","useEffect","getFriendsList","friendsList","photos","large","navigationClasses","navigation","activeClassName","active","profileIcon","messagesIcon","usersIcon","chatIcon","friendsBlock","ProfileStatus","useState","editMode","setEditMode","setStatus","onBlur","updateStatus","autoFocus","onFocus","select","onChange","currentTarget","value","onClick","isOwner","reduxForm","form","handleSubmit","profile","onSubmit","profileClasses","dataItemName","Field","component","Input","placeholder","field","dataItemCheck","dataItemField","Textarea","fieldText","dataItemContacts","Object","keys","contacts","key","social","formControlClasses","formSummaryError","button","ProfileInfo","goToEditMode","dataItem","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","Profile","savePhoto","saveProfileData","isFollow","follow","unfollow","authorizedUserId","profileLoading","userId","upload","files","info","fullName","initialValues","formData","then","profileAPI","instance","get","response","put","photoFile","FormData","append","profileData","postsData","addPost","newPostText","setUserProfile","savePhotoSuccess","getUserProfile","profileReducer","newPost","author","date","title","text","Post","postClasses","post","header","left","content","maxLength30","maxLengthCreator","AddPostForm","onSubmitSuccess","result","reset","validate","requiredField","Posts","posts","reverse","postsClasses","values","connect","profilePage","Content","PostsContainer","ContentContainer","this","match","params","history","isFollowedUser","getStatus","refreshProfile","prevProps","prevState","React","Component","compose","withRouter","auth","isAuth","usersPage","resultCode","ResultCodes","Success","file","getState","stopSubmit","_error","Promise","reject","Header","login","logout","headerClasses","logotype","logo","HeaderContainer","Error","errorClasses","rootReducer","combineReducers","messagesPage","asideReducer","usersReducer","authReducer","app","chat","formReducer","store","createStore","applyMiddleware","thunkMiddleware","MessagesContainer","lazy","Users","LoginPage","ChatPage","SuspendedMessagesPage","SuspendedUsersPage","SuspendedLoginPage","SuspendedChatPage","App","initializeApp","exact","path","render","AppContainer","promise","getAuthUserData","all","SocialNetworkApp","ReactDOM","document","getElementById","loadingClasses","loading","input","meta","hasError","touched","formControl","usersAPI","items","getUsers","currentPage","pageSize","term","delete","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","ResultCodesForCaptcha","CaptchaIsRequired","getCaptchaUrl","users","totalUsersCount","followingProgress","totalCount","pageNumber","user","followed","axios","create","withCredentials","baseURL","headers","maxLength"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,KAAO,sBAAsB,OAAS,wBAAwB,KAAO,sBAAsB,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,8BAA8B,cAAgB,+BAA+B,iBAAmB,kCAAkC,cAAgB,+BAA+B,SAAW,0BAA0B,MAAQ,uBAAuB,UAAY,2BAA2B,OAAS,0B,oBCAjsBD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,QAAU,yB,6ECInDC,EAAe,CACjBC,OAAO,EACPC,aAAc,MAiBLC,EAAS,CAClBC,WAAY,SAACH,EAAgBC,GAAjB,MAAkD,CAACG,KAAM,cAAeJ,QAAOC,kBAGhFI,IAlBM,WAAmE,IAAlEC,EAAiE,uDAAzDP,EAAcG,EAA2C,uCACnF,OAAQA,EAAOE,MACX,IAAK,cACD,OAAO,2BACAE,GADP,IAEIN,MAAOE,EAAOF,MACdC,aAAcC,EAAOD,eAG7B,QACI,OAAOK,K,+FCVbP,EAAe,CACjBQ,aAAc,IAoBLC,EAAU,CACnBC,YAAa,SAACC,GAAD,MAA6B,CAACN,KAAM,eAAgBM,oBAGtDC,IArBS,WAAmE,IAAlEL,EAAiE,uDAAzDP,EAAcG,EAA2C,uCACtF,OAAQA,EAAOE,MACX,IAAK,eACD,IAAIQ,EAAa,CACbC,GAAIC,cACJC,QAASb,EAAOQ,gBAEpB,OAAO,2BACAJ,GADP,IAEIC,aAAa,GAAD,mBAAMD,EAAMC,cAAZ,CAA0BK,MAG9C,QACI,OAAON,K,2ICZfU,E,+CAJEC,EAAc,CACnB,mBAAoB,GACpB,iBAAkB,IAIbC,EAAe,WACpBC,EAAkB,WAClBC,WAAWC,EAAe,MAErBC,EAAiB,SAACC,GACvB,IAAMC,EAAcC,KAAKC,MAAMH,EAAEI,MACjCV,EAAY,oBAAoBW,SAAQ,SAAAC,GAAU,OAAIA,EAAWL,OAE5DM,EAAc,WACnBX,EAAkB,UAEbY,EAAe,WACpBZ,EAAkB,UAEba,EAAU,WAAO,IAAD,QACnB,QAAF,EAAAhB,SAAA,SAAIiB,oBAAoB,QAASf,GAC/B,QAAF,EAAAF,SAAA,SAAIiB,oBAAoB,UAAWX,GACjC,QAAF,EAAAN,SAAA,SAAIiB,oBAAoB,OAAQH,GAC9B,QAAF,EAAAd,SAAA,SAAIiB,oBAAoB,QAASF,IAE5BZ,EAAoB,SAACe,GAC1BjB,EAAY,kBAAkBW,SAAQ,SAAAC,GAAU,OAAIA,EAAWK,OAE1Db,EAAgB,WAAO,IAAD,UAC3BW,IACE,QAAF,EAAAhB,SAAA,SAAImB,QACJnB,EAAK,IAAIoB,UAAU,gEACnBjB,EAAkB,WAChB,QAAF,EAAAH,SAAA,SAAIqB,iBAAiB,QAASnB,GAC5B,QAAF,EAAAF,SAAA,SAAIqB,iBAAiB,UAAWf,GAC9B,QAAF,EAAAN,SAAA,SAAIqB,iBAAiB,OAAQP,GAC3B,QAAF,EAAAd,SAAA,SAAIqB,iBAAiB,QAASN,IAGlBO,EAAU,WAErBjB,KAFWiB,EAAU,WAKd,IAAD,EACNrB,EAAY,oBAAsB,GAClCA,EAAY,kBAAoB,GAChCe,IACE,QAAF,EAAAhB,SAAA,SAAImB,SATOG,EAAU,SAYZC,EAA6BC,GAGtC,OADAvB,EAAYsB,GAAWE,KAAKD,GACrB,WAENvB,EAAYsB,GAAatB,EAAYsB,GAAWG,QAAO,SAAAb,GAAU,OAAIA,IAAeW,OAjB1EF,EAAU,SAqBVC,EAA6BC,GAExCvB,EAAYsB,GAAatB,EAAYsB,GAAWG,QAAO,SAAAb,GAAU,OAAIA,IAAeW,MAvBzEF,EAAU,SA0BVvB,GAAkB,IAAD,EAC1B,QAAF,EAAAC,SAAA,SAAI2B,KAAK5B,I,SCnELhB,EAAe,CACjB6C,SAAU,GACVV,OAAQ,WA8BC1B,EACS,SAACoC,GAAD,MAAqC,CAACxC,KAAM,oBAAqByC,QAAS,CAACD,cADpFpC,EAEM,SAAC0B,GAAD,MAAyB,CAAC9B,KAAM,iBAAkByC,QAAS,CAACX,YAFlE1B,EAGM,SAACoC,GAAD,MAAkC,CAACxC,KAAM,iBAAkByC,QAAS,CAACD,cAGpFE,EAAwE,KACtEC,EAA2B,SAACC,GAM9B,OAL2B,OAAvBF,IACAA,EAAqB,SAACF,GAClBI,EAASxC,EAAyBoC,MAGnCE,GAGPG,EAA+D,KAC7DC,EAA8B,SAACF,GAMjC,OAL8B,OAA1BC,IACAA,EAAwB,SAACf,GACrBc,EAASxC,EAAsB0B,MAGhCe,GAGEE,EAAyB,WAClC,8CAAO,WAAOH,GAAP,eAAAI,EAAA,sDACH,IACId,IACAA,EAAkB,mBAAoBS,EAAyBC,IAC/DV,EAAkB,iBAAkBY,EAA4BF,IAClE,MAAOzB,GACCR,EAAUQ,EAAER,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAPlC,2CAAP,uDAYSsC,EAAwB,WACjC,8CAAO,WAAOL,GAAP,eAAAI,EAAA,sDACH,IACId,EAAoB,mBAAoBS,EAAyBC,IACjEV,EAAoB,iBAAkBY,EAA4BF,IAClEV,IACAU,EAASxC,EAAsB,KACjC,MAAOe,GACCR,EAAUQ,EAAER,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IARlC,2CAAP,uDAaSN,EAAc,SAACM,GACxB,8CAAO,WAAOiC,GAAP,eAAAI,EAAA,sDACH,IACId,EAAoBvB,GACtB,MAAOQ,GACCR,EAAUQ,EAAER,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IALlC,2CAAP,uDAUWuC,IA3FK,WAAmE,IAAlEhD,EAAiE,uDAAzDP,EAAcG,EAA2C,uCAClF,OAAQA,EAAOE,MACX,IAAK,oBACD,OAAO,2BACAE,GADP,IAEIsC,SAAU,sBAAItC,EAAMsC,UAAV,YAAuB1C,EAAO2C,QAAQD,SAC3CW,KAAK,SAAAC,GAAC,kCAAUA,GAAV,IAAa3C,GAAIC,qBACvB4B,QAAO,SAACc,EAAGC,EAAOC,GAAX,OAAqBD,GAASC,EAAMC,OAAS,SAGjE,IAAK,iBACD,OAAO,2BACArD,GADP,IAEIsC,SAAU1C,EAAO2C,QAAQD,WAGjC,IAAK,iBACD,OAAO,2BACAtC,GADP,IAEI4B,OAAQhC,EAAO2C,QAAQX,SAG/B,QACI,OAAO5B,K,oBCtCnBT,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,kNCOpBC,EAAe,CACjB6D,aAAa,GAgBJpD,EACW,iBAAO,CAACJ,KAAM,gBAkBvByD,EAhCI,WAAmE,IAAlEvD,EAAiE,uDAAzDP,EAAcG,EAA2C,uCACjF,OAAQA,EAAOE,MACX,IAAK,cACD,OAAO,2BACAE,GADP,IAEIsD,aAAa,IAGrB,QACI,OAAOtD,I,eClBZ,SAASwD,EAAkBC,GAC9B,OAAO,SAACC,GACJ,OACI,cAAC,IAAMC,SAAP,CAAgBC,SAAU,cAACC,EAAA,EAAD,IAA1B,SACI,cAACJ,EAAD,eAAsBC,O,4BCPvB,MAA0B,+BCA1B,MAA0B,mCCoC1BI,EA/BI,WACf,OACI,yBAAQC,UAAWC,IAAcC,OAAjC,UAEI,sBAAKF,UAAWC,IAAcE,QAA9B,UACI,6BACI,6BACI,oBAAGC,KAAK,gCAAgCC,OAAO,SAASC,IAAI,aAA5D,UACI,qBAAKC,IAAKC,EAAQC,IAAI,YACtB,6CAIZ,6BACI,6BACI,oBAAGL,KAAK,oCAAoCC,OAAO,SAASC,IAAI,aAAhE,UACI,qBAAKC,IAAKG,EAAYD,IAAI,gBAC1B,oDAMhB,qBAAKT,UAAWC,IAAcU,SAA9B,SACI,iE,iBC7BD,MAA0B,oCCA1B,MAA0B,qCCA1B,MAA0B,kCCA1B,MAA0B,iC,yBC+B1BC,EApBe,SAAC,GAAqB,IAApBpE,EAAmB,EAAnBA,GAAIqE,EAAe,EAAfA,KAAMC,EAAS,EAATA,IACtC,OACI,eAAC,IAAD,CAASC,GAAI,YAAcvE,EAAIwD,UAAWgB,IAAcC,OAAxD,UAEI,qBAAKjB,UAAWgB,IAAcH,KAA9B,SAEKA,EAAKK,gBAIV,qBAAKlB,UAAWgB,IAAcG,MAA9B,SAEI,qBAAKZ,IAAKO,GAAYM,IAAQX,IAAI,wBCrBrCY,EAAa,SAACpF,GAC1B,OAAOA,EAAMqF,MAAMC,SAGPC,EAAe,SAACvF,GAC5B,OAAOA,EAAMqF,MAAMG,W,QCgFLC,EA1EQ,WACnB,IAAMH,EAAUI,YAAYN,GACtBI,EAAYE,YAAYH,GAExB7C,EAAWiD,cAEjBC,qBAAU,WAINlD,GAHkB,WACdA,EAASmD,oBAGd,CAACnD,IAEJ,IAAIoD,EAAcR,EAAQrC,KAAI,SAAA+B,GAAM,OAAI,cAAC,EAAD,CAEpCzE,GAAIyE,EAAOzE,GACXqE,KAAMI,EAAOJ,KACbC,IAAKG,EAAOe,OAAOC,OAHdhB,EAAOzE,OAMhB,OACI,sBAAKwD,UAAWkC,IAAkBC,WAAlC,UACI,+BAEI,6BACI,eAAC,IAAD,CAASpB,GAAG,WAAWqB,gBAAiBF,IAAkBG,OAA1D,UACI,qBAAK9B,IAAK+B,EAAa7B,IAAI,iBAC3B,gDAIR,6BACI,eAAC,IAAD,CAASM,GAAG,YAAYqB,gBAAiBF,IAAkBG,OAA3D,UACI,qBAAK9B,IAAKgC,EAAc9B,IAAI,kBAC5B,iDAIR,6BACI,eAAC,IAAD,CAASM,GAAG,SAASqB,gBAAiBF,IAAkBG,OAAxD,UACI,qBAAK9B,IAAKiC,EAAW/B,IAAI,eACzB,8CAIR,6BACI,eAAC,IAAD,CAASM,GAAG,QAAQqB,gBAAiBF,IAAkBG,OAAvD,UACI,qBAAK9B,IAAKkC,EAAUhC,IAAI,cACxB,gDAMZ,sBAAKT,UAAWkC,IAAkBQ,aAAlC,UAEI,8BACI,2CAGJ,qBAAK1C,UAAWkC,IAAkBX,QAAlC,SACKE,EACK,cAAC3B,EAAA,EAAD,IACuB,IAAvBiC,EAAYzC,OACRyC,EACA,2B,yBCzBfY,EA7CsB,SAAChD,GAClC,MAAgCiD,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAASjD,EAAM9B,QAA3C,mBAAOA,EAAP,KAAekF,EAAf,KAEAlB,qBAAU,WACNkB,EAAUpD,EAAM9B,UACjB,CAAC8B,EAAM9B,SAqBV,OACI,8BACKgF,EACO,oCAAM,uBAAOG,OAhBF,WACvBF,GAAY,GACZnD,EAAMsD,aAAapF,IAeMqF,WAAW,EACXC,QATT,SAACjG,GACjBA,EAAEmD,OAAO+C,UASgBC,SAdN,SAACnG,GACpB6F,EAAU7F,EAAEoG,cAAcC,QAcDA,MAAO1F,OAEpB,sBAAK2F,QA5BI,WACjB7D,EAAM8D,SACNX,GAAY,IA0BJ,cAAkCnD,EAAM9B,OAC9B8B,EAAM9B,OACN,6C,4CCWf6F,eAAkC,CAACC,KAAM,eAAzCD,EA9CoE,SAAC,GAI7E,IAHiFE,EAGlF,EAHkFA,aACAC,EAElF,EAFkFA,QACAlI,EAClF,EADkFA,MAEpF,OACI,uBAAMmI,SAAUF,EAAc5D,UAAW+D,IAAezG,KAAxD,UACI,sBAAK0C,UAAW+D,IAAeC,aAA/B,UACI,4CACA,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAOtD,KAAK,WAAWuD,YAAY,YAAYpE,UAAW+D,IAAeM,WAG/F,sBAAKrE,UAAW+D,IAAeO,cAA/B,UACI,oDACA,cAACL,EAAA,EAAD,CAAOC,UAAWC,IAAOtD,KAAK,iBAAiB9E,KAAK,gBAGxD,sBAAKiE,UAAW+D,IAAeQ,cAA/B,UACI,sDACA,cAACN,EAAA,EAAD,CAAOC,UAAWM,IAAU3D,KAAK,4BAA4BuD,YAAY,sBAAsBpE,UAAW+D,IAAeU,eAG7H,sBAAKzE,UAAW+D,IAAeQ,cAA/B,UACI,2CACA,cAACN,EAAA,EAAD,CAAOC,UAAWM,IAAU3D,KAAK,UAAUuD,YAAY,WAAWpE,UAAW+D,IAAeU,eAGhG,sBAAKzE,UAAW+D,IAAeW,iBAA/B,UACI,2CACCC,OAAOC,KAAKf,EAAQgB,UAAU3F,KAAI,SAAA4F,GAC/B,OAAO,sBAAe9E,UAAW+D,IAAec,SAAzC,UACH,+BAAKC,EAAL,OACA,cAACb,EAAA,EAAD,CAAOC,UAAWC,IAAOtD,KAAM,YAAciE,EAAKV,YAAaU,EAAK9E,UAAW+D,IAAegB,WAFjFD,SAOxBnJ,GAAS,qBAAKqE,UAAWgF,KAAmBC,iBAAnC,SAAsDtJ,IAEhE,qBAAKqE,UAAW+D,IAAemB,OAA/B,SACI,kDCmDVC,GAAmC,SAAC,GAAsC,IAArCtB,EAAoC,EAApCA,QAASJ,EAA2B,EAA3BA,QAAS2B,EAAkB,EAAlBA,aACzD,OACI,sBAAKpF,UAAW+D,IAAezG,KAA/B,UACI,sBAAK0C,UAAW+D,IAAesB,SAA/B,UACI,qDACA,4BAAIxB,EAAQyB,eAAiB,MAAQ,UAGzC,sBAAKtF,UAAW+D,IAAesB,SAA/B,UACI,sDACA,4BAAIxB,EAAQ0B,+BAGhB,sBAAKvF,UAAW+D,IAAesB,SAA/B,UACI,4CACA,4BAAIxB,EAAQ2B,aAGhB,sBAAKxF,UAAW+D,IAAeW,iBAA/B,UACI,2CACCC,OACIC,KAAKf,EAAQgB,UACb3F,KAAK,SAAA4F,GAAQ,OAAO,cAAC,GAAD,CAEjBW,aAAcX,EACdY,aAAc7B,EAAQgB,SAASC,IAF1BA,SAMhBrB,GACD,qBAAKzD,UAAW+D,IAAemB,OAA/B,SACI,wBAAQ1B,QAAS4B,EAAjB,wBAQVO,GAAkC,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACpD,OACI,8BACKA,GAAgB,sBAAK1F,UAAW+D,IAAec,SAA/B,UACb,6BAAKY,EACCC,GAAgBD,EAChB,OAEN,mBAAGrF,KAAMsF,EAAcrF,OAAO,SAASC,IAAI,aAA3C,SAAyDoF,UAO1DE,GAzIuB,SAAC,GAWhC,IAVoC/B,EAUrC,EAVqCA,QACAgC,EASrC,EATqCA,UACAC,EAQrC,EARqCA,gBACArC,EAOrC,EAPqCA,QACA5F,EAMrC,EANqCA,OACAoF,EAKrC,EALqCA,aACA8C,EAIrC,EAJqCA,SACAC,EAGrC,EAHqCA,OACAC,EAErC,EAFqCA,SACAC,EACrC,EADqCA,iBAEvC,EAAgCtD,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,IAAKe,EACD,OAAO,qBAAK7D,UAAW+D,IAAeoC,eAA/B,SACH,cAACrG,EAAA,EAAD,MAgBR,OACI,sBAAKE,UAAW+D,IAAeF,QAA/B,UAEI,sBAAK7D,UAAW+D,IAAe5C,MAA/B,UACI,qBAAKZ,IAAKsD,EAAQ7B,OAAOC,MAAQ4B,EAAQ7B,OAAOC,MAAQb,IAAQX,IAAI,mBACnEoD,EAAQuC,SAAWF,EACd,KACA,8BACGH,EACK,wBACEvC,QAAS,WACLyC,EAASpC,EAAQuC,SAErBpG,UAAW+D,IAAekC,SAJ5B,sBAMA,wBACEzC,QAAS,WACLwC,EAAOnC,EAAQuC,SAEnBpG,UAAW+D,IAAeiC,OAJ5B,sBAUbvC,GACE,sBAAKzD,UAAW+D,IAAesC,OAA/B,UACK,+CACA,uBAAOtK,KAAK,OAAOsH,SAxCX,SAACnG,GAAsC,IAAD,GAC9D,UAAIA,EAAEmD,OAAOiG,aAAb,aAAI,EAAgBhH,SAChBuG,EAAU3I,EAAEmD,OAAOiG,MAAM,aA2CzB,sBAAKtG,UAAW+D,IAAewC,KAA/B,UACI,6BAAK1C,EAAQ2C,SAAW3C,EAAQ2C,SAAW,SAE3C,qBAAKxG,UAAW+D,IAAelG,OAA/B,SACI,cAAC,EAAD,CAAeA,OAAQA,EAAQ4F,QAASA,EAASR,aAAcA,MAGlEJ,EACK,cAAC,GAAD,CAAiB4D,cAAe5C,EAASA,QAASA,EAASC,SA/C5D,SAAC4C,GACdZ,EAAgBY,GAAUC,MAAK,WAC3B7D,GAAY,SA8CF,cAAC,GAAD,CAAae,QAASA,EAASJ,QAASA,EAAS2B,aAAc,WAAOtC,GAAY,a,0BCtF3F8D,GAAa,SACXR,GACP,OAAOS,KAASC,IAAiB,WAAaV,GACzCO,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAJnBsJ,GAAa,SAQZR,GACN,OAAOS,KAASC,IAAY,kBAAoBV,GAC3CO,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAXnBsJ,GAAa,SAeT/I,GACT,OAAOgJ,KAASG,IAAT,kBAAiD,CAACnJ,OAAQA,IAC5D8I,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAlBnBsJ,GAAa,SAsBZK,GACN,IAAMP,EAAW,IAAIQ,SAGrB,OAFAR,EAASS,OAAO,QAASF,GAElBJ,KAASG,IAAT,gBAAsEN,GACxEC,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SA5BnBsJ,GAAa,SAgCNQ,GACZ,OAAOP,KAASG,IAAT,UAAyCI,GAAaT,MAAK,SAAAI,GAC9D,OAAOA,EAASzJ,S,UC5BtB5B,GAAe,CACjB2L,UAAW,GACXxD,QAAS,KACThG,OAAQ,IA0CC1B,GAAU,CACnBmL,QAAS,SAACC,GAAD,MAA0B,CAACxL,KAAM,WAAYwL,gBACtDC,eAAgB,SAAC3D,GAAD,MAA2B,CAAC9H,KAAM,mBAAoB8H,YACtEd,UAAW,SAAClF,GAAD,MAAqB,CAAC9B,KAAM,aAAc8B,WACrD4J,iBAAkB,SAACzF,GAAD,MAAyB,CAACjG,KAAM,qBAAsBiG,YAG/D0F,GAAiB,SAACtB,GAC3B,8CAAO,WAAOzH,GAAP,iBAAAI,EAAA,+EAEoB6H,GAAsBR,GAF1C,OAEO9I,EAFP,OAGCqB,EAASxC,GAAQqL,eAAelK,IAHjC,gDAKOZ,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IANlC,yDAAP,uDA6EWiL,GA5HQ,WAAmE,IAAlE1L,EAAiE,uDAAzDP,GAAcG,EAA2C,uCACrF,OAAQA,EAAOE,MACX,IAAK,WACD,IAAI6L,EAAU,CACVpL,GAAIC,eACJoL,OAAQ,iBACRC,KAAM,cACNC,MAAO,UACPjH,IAAKM,IACL4G,KAAMnM,EAAO0L,aAEjB,OAAO,2BACAtL,GADP,IAEIoL,UAAU,GAAD,oBAAMpL,EAAMoL,WAAZ,CAAuBO,MAGxC,IAAK,mBACD,OAAO,2BACA3L,GADP,IAEI4H,QAAShI,EAAOgI,UAGxB,IAAK,aACD,OAAO,2BACA5H,GADP,IAEI4B,OAAQhC,EAAOgC,SAGvB,IAAK,qBACD,OAAO,2BACA5B,GADP,IAEI4H,QAAQ,2BAAK5H,EAAM4H,SAAZ,IAAqB7B,OAAQnG,EAAOmG,WAGnD,QACI,OAAO/F,I,yCCnBJgM,GAxBa,SAAC,GAAsC,IAArCnH,EAAoC,EAApCA,IAAK+G,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACpD,OACI,sBAAKhI,UAAWkI,KAAYC,KAA5B,UACI,sBAAKnI,UAAWkI,KAAYE,OAA5B,UAEI,qBAAKpI,UAAWkI,KAAYG,KAA5B,SACI,qBAAK9H,IAAKO,EAAKL,IAAI,oBAGvB,sBAAKT,UAAWkI,KAAYL,OAA5B,UACI,6BAAKA,IACL,4BAAIC,UAKZ,sBAAK9H,UAAWkI,KAAYI,QAA5B,UACI,6BAAKP,IACL,4BAAIC,W,SCrBdO,GAAcC,aAAiB,IAYxBC,GAAc/E,YAA4C,CAACC,KAAM,WAAY+E,gBAXtE,SAACC,EAAahK,GAAd,OAAsDA,EAASiK,aAAM,eAW9DlF,EAT2D,SAAC/D,GACnF,OACI,uBAAMmE,SAAUnE,EAAMiE,aAAtB,UACI,cAACK,EAAA,EAAD,CAAOpD,KAAK,cAAcqD,UAAWM,IAAUJ,YAAY,gBAAgByE,SAAU,CAACC,KAAeP,MACrG,8BAAK,iDCiCFQ,GA/Bc,SAACpJ,GAC1B,IAAIqJ,EAAQ,aAAIrJ,EAAMqJ,OACjBC,UACA/J,KAAI,SAAAiJ,GAAI,OAAI,cAAC,GAAD,CAEbN,OAAQM,EAAKN,OACbC,KAAMK,EAAKL,KACXC,MAAOI,EAAKJ,MACZC,KAAMG,EAAKH,KACXlH,IAAKqH,EAAKrH,KALLqH,EAAK3L,OAYd,OACI,sBAAKwD,UAAWkJ,KAAaF,MAA7B,UACI,8BACI,4CAGJ,qBAAKhJ,UAAWkJ,KAAa5B,QAA7B,SACI,cAACmB,GAAD,CAAa3E,SAXX,SAACqF,GACXxJ,EAAM2H,QAAQ6B,EAAO5B,kBAahByB,MChCEI,gBANS,SAACnN,GACrB,MAAO,CACH+M,MAAO/M,EAAMoN,YAAYhC,aAK7B,CAACC,QAASnL,GAAQmL,SADP8B,CAEZL,ICsCYO,GAjCuB,SAAC,GAWhC,IAVoCzF,EAUrC,EAVqCA,QACAiC,EASrC,EATqCA,gBACAD,EAQrC,EARqCA,UACApC,EAOrC,EAPqCA,QACA5F,EAMrC,EANqCA,OACAoF,EAKrC,EALqCA,aACA8C,EAIrC,EAJqCA,SACAC,EAGrC,EAHqCA,OACAC,EAErC,EAFqCA,SACAC,EACrC,EADqCA,iBAEvC,OACI,kCAEI,cAAC,GAAD,CAASrC,QAASA,EACTiC,gBAAiBA,EACjBD,UAAWA,EACXpC,QAASA,EACT5F,OAAQA,EACRoF,aAAcA,EACd8C,SAAUA,EACVC,OAAQA,EACRC,SAAUA,EACVC,iBAAkBA,IAG3B,cAACqD,GAAD,Q,SCnBNC,G,oKACF,WACI,IAAIpD,GAAyBqD,KAAK9J,MAAM+J,MAAMC,OAAOvD,OAChDA,IACDA,EAASqD,KAAK9J,MAAMuG,mBAGhBuD,KAAK9J,MAAMiK,QAAQxL,KAAK,UAGhCqL,KAAK9J,MAAM+H,eAAetB,GAC1BqD,KAAK9J,MAAMkK,eAAezD,GAC1BqD,KAAK9J,MAAMmK,UAAU1D,K,+BAGzB,WACIqD,KAAKM,mB,gCAGT,SAAmBC,EAAsBC,GACjCR,KAAK9J,MAAM+J,MAAMC,OAAOvD,SAAW4D,EAAUN,MAAMC,OAAOvD,QAC1DqD,KAAKM,mB,oBAIb,WACI,OAAO,cAAC,GAAD,2BACCN,KAAK9J,OADN,IAEHkE,QAAS4F,KAAK9J,MAAMkE,QACpBiC,gBAAiB2D,KAAK9J,MAAMmG,gBAC5BD,UAAW4D,KAAK9J,MAAMkG,UACtBpC,SAAUgG,KAAK9J,MAAM+J,MAAMC,OAAOvD,OAClCvI,OAAQ4L,KAAK9J,MAAM9B,OACnBoF,aAAcwG,KAAK9J,MAAMsD,aACzB8C,SAAU0D,KAAK9J,MAAMoG,SACrBC,OAAQyD,KAAK9J,MAAMqG,OACnBC,SAAUwD,KAAK9J,MAAMsG,SACrBC,iBAAkBuD,KAAK9J,MAAMuG,wB,GArCVgE,IAAMC,WAoDtBC,eACXC,IACAjB,aAZoB,SAACnN,GACrB,MAAO,CACH4H,QAAS5H,EAAMoN,YAAYxF,QAC3BhG,OAAQ5B,EAAMoN,YAAYxL,OAC1BqI,iBAAkBjK,EAAMqO,KAAKlE,OAC7BmE,OAAQtO,EAAMqO,KAAKC,OACnBxE,SAAU9J,EAAMuO,UAAUzE,YAML,CAAC2B,kBAAgBoC,UNHrB,SAAC1D,GACtB,8CAAO,WAAOzH,GAAP,iBAAAI,EAAA,+EAEoB6H,GAAqBR,GAFzC,OAEO9I,EAFP,OAGCqB,EAASxC,GAAQ4G,UAAUzF,IAH5B,gDAKOZ,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IANlC,yDAAP,uDMEqDuG,aNS7B,SAACpF,GACzB,8CAAO,WAAOc,GAAP,eAAAI,EAAA,+EAEoB6H,GAAwB/I,GAF5C,cAGU4M,aAAeC,KAAYC,SAChChM,EAASxC,GAAQ4G,UAAUlF,IAJhC,gDAOOnB,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IARlC,yDAAP,uDMVmEmJ,UNuB9C,SAAC+E,GACtB,8CAAO,WAAOjM,GAAP,iBAAAI,EAAA,+EAEoB6H,GAAqBgE,GAFzC,QAEOtN,EAFP,QAIUmN,aAAeC,KAAYC,SAChChM,EAASxC,GAAQsL,iBAAiBnK,EAAKA,KAAK0E,SALjD,gDAQOtF,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IATlC,yDAAP,uDMxB8EoJ,gBNsCnD,SAACsB,GAC5B,8CAAO,WAAOzI,EAAUkM,GAAjB,mBAAA9L,EAAA,sEAEOqH,EAASyE,IAAWP,KAAKlE,OAFhC,SAGoBQ,GAA2BQ,GAH/C,WAGO9J,EAHP,QAKUmN,aAAeC,KAAYC,QALrC,oBAMoB,OAAXvE,EANT,iCAOezH,EAAS+I,GAAetB,IAPvC,yDAUSzH,EAAS9C,IAAOC,YAAW,EAVpC,mEAaK6C,EAASmM,aAAW,cAAe,CAACC,OAAQzN,EAAKiB,SAAS,MAb/D,kBAeYyM,QAAQC,OAAO3N,EAAKiB,SAAS,KAfzC,0DAkBO7B,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAnBlC,0DAAP,yDMvC+FsJ,YAAQC,cAAU4D,sBAFtGO,CAGbZ,ICjFa,OAA0B,iC,oBCoC1B0B,GArBwC,SAAC,GAA6B,IAA5BX,EAA2B,EAA3BA,OAAQY,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACpE,OACI,yBAAQpL,UAAWqL,KAAcjD,OAAjC,UAEI,qBAAKpI,UAAWqL,KAAcC,SAA9B,SACI,cAAC,IAAD,CAASvK,GAAG,WAAZ,SACI,qBAAKR,IAAKgL,GAAM9K,IAAI,mBAI5B,qBAAKT,UAAWqL,KAAcF,MAA9B,SACKZ,EACK,+BAAKY,EAAL,IAAY,wBAAQnL,UAAWqL,KAAcD,OAAQ5H,QAAS4H,EAAlD,uBACZ,cAAC,IAAD,CAASrK,GAAG,SAAZ,yBCtBhByK,G,4JACF,WACI,OAAO,cAAC,GAAD,eAAY/B,KAAK9J,Y,GAFFuK,IAAMC,WAarBf,gBAPS,SAACnN,GACrB,MAAO,CACHsO,OAAQtO,EAAMqO,KAAKC,OACnBY,MAAOlP,EAAMqO,KAAKa,SAKtB,CAACC,YADUhC,CAEZoC,I,qBCNYC,GARc,SAAC,GAAoB,IAAnB7P,EAAkB,EAAlBA,aAC3B,OACI,qBAAKoE,UAAW0L,KAAa/P,MAA7B,SACI,4BAAIC,O,wCCYZ+P,GAAcC,YAAgB,CAC9BvC,YAAa1B,GACbkE,aAAcvP,KACdgF,MAAOwK,IACPtB,UAAWuB,KACXzB,KAAM0B,IACNC,IAAKzM,EACL7D,MAAOK,IACPkQ,KAAMjN,KACN0E,KAAMwI,OAKKC,GAFHC,YAAYV,GAAaW,YAAgBC,OCb/CC,GAAoBtC,IAAMuC,MAAK,kBAAM,iCACrCC,GAAQxC,IAAMuC,MAAK,kBAAM,uDACzBE,GAAYzC,IAAMuC,MAAK,kBAAM,iCAC7BG,GAAW1C,IAAMuC,MAAK,kBAAM,iCAE5BI,GAAwBpN,EAAa+M,IACrCM,GAAqBrN,EAAaiN,IAClCK,GAAqBtN,EAAakN,IAClCK,GAAoBvN,EAAamN,IAEjCK,G,uKACF,WACIxD,KAAK9J,MAAMuN,kB,oBAGf,WACI,OAAKzD,KAAK9J,MAAMJ,YAKZ,sBAAKS,UAAU,cAAf,UACI,cAAC,GAAD,IACCyJ,KAAK9J,MAAMhE,OAAS,cAAC,GAAD,CAAOC,aAAc6N,KAAK9J,MAAM/D,eACrD,cAAC,EAAD,IACA,qBAAKoE,UAAU,cAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmN,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAAM,cAAC,IAAD,CAAUtM,GAAG,gBAClD,cAAC,IAAD,CAAOqM,KAAK,oBAAoBC,OAAS,kBAAM,cAAC,GAAD,OAC/C,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAS,kBAAM,cAACR,GAAD,OACvC,cAAC,IAAD,CAAOO,KAAK,SAASC,OAAS,kBAAM,cAACP,GAAD,OACpC,cAAC,IAAD,CAAOM,KAAK,SAASC,OAAS,kBAAM,cAACN,GAAD,OACpC,cAAC,IAAD,CAAOK,KAAK,QAAQC,OAAS,kBAAM,cAACL,GAAD,OACnC,cAAC,IAAD,CAAOI,KAAK,IAAIC,OAAS,kBAAM,qBAAKrN,UAAU,UAAf,4BAGvC,cAAC,EAAD,OAnBG,cAACF,EAAA,EAAD,Q,GAPDoK,IAAMC,WAwClBmD,GAAgBlD,YAClBC,IACAjB,aAVoB,SAACnN,GACrB,MAAO,CACHsD,YAAatD,EAAMgQ,IAAI1M,YACvB5D,MAAOM,EAAMN,MAAMA,MACnBC,aAAcK,EAAMN,MAAMC,gBAML,CAACsR,c5B5CD,WACzB,8CAAO,WAAOvO,GAAP,iBAAAI,EAAA,sDACH,IACUwO,EAAU5O,EAAS6O,eAEzBxC,QAAQyC,IAAI,CAACF,IAAU5G,MAAK,WACxBhI,EAASxC,QAEf,MAAOe,GACCR,EAAUQ,EAAER,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IATlC,2CAAP,yD4ByCkB0N,CAGnB6C,IAYYS,GAVc,WACzB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUtB,MAAOA,GAAjB,SACI,cAACkB,GAAD,SC5EhBK,IAASN,OAAO,cAAC,GAAD,IAAsBO,SAASC,eAAe,U,gCCJ9D,kCAkBe/N,IAfK,WAChB,OACI,sBAAKE,UAAW8N,IAAeC,QAA/B,UACI,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,6B,4LCTCvJ,EAAkC,SAAC,GAA6B,IAA5BwJ,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAStO,EAAW,iBAClEuO,EAAWD,EAAKE,SAAWF,EAAKtS,MAEtC,OACI,sBAAKqE,UAAWgF,IAAmBoJ,YAAc,KAAOF,EAAWlJ,IAAmBrJ,MAAQ,IAA9F,UACI,oDAAcqS,GAAWrO,IACxBuO,GAAY,+BAAOD,EAAKtS,YAKxBwI,EAA+B,SAAC,GAA6B,IAA5B6J,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAStO,EAAW,iBAC/DuO,EAAWD,EAAKE,SAAWF,EAAKtS,MAEtC,OACI,sBAAKqE,UAAWgF,IAAmBoJ,YAAc,KAAOF,EAAWlJ,IAAmBrJ,MAAQ,IAA9F,UACI,iDAAWqS,GAAWrO,IACrBuO,GAAY,+BAAOD,EAAKtS,a,mBCpBrCH,EAAOC,QAAU,CAAC,WAAa,+BAA+B,OAAS,2BAA2B,aAAe,iCAAiC,QAAU,8B,qHCQtJC,EAAe,CACjB6F,QAAS,GACTE,WAAW,GAsBFtF,EACG,SAACoF,GAAD,MAA0B,CAACxF,KAAM,cAAewF,YADnDpF,EAEQ,SAACsF,GAAD,MAAyB,CAAC1F,KAAM,oBAAqB0F,cAG7DK,EAAiB,WAC1B,8CAAO,WAAOnD,GAAP,iBAAAI,EAAA,sEAECJ,EAASxC,GAAwB,IAFlC,SAGoBkS,IAAShN,aAH7B,OAGO/D,EAHP,OAICqB,EAASxC,GAAwB,IACjCwC,EAASxC,EAAmBmB,EAAKgR,QALlC,gDAOO5R,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IARlC,yDAAP,uDAaWoP,IAtCM,WAAmE,IAAlE7P,EAAiE,uDAAzDP,EAAcG,EAA2C,uCACnF,OAAQA,EAAOE,MACX,IAAK,cACD,OAAO,2BACAE,GADP,IAEIsF,QAAS1F,EAAO0F,UAGxB,IAAK,oBACD,OAAO,2BACAtF,GADP,IAEIwF,UAAW5F,EAAO4F,YAG1B,QACI,OAAOxF,K,mBC5BnBT,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,gCCDvH,6CAEa4S,EAAW,CACpBE,SADoB,WACwE,IAAnFC,EAAkF,uDAApE,EAAGC,EAAiE,uDAAtD,GAAIC,EAAkD,uDAAnC,GAAIzN,EAA+B,uDAAN,KACjF,OAAO4F,IAASC,IAAkB,qBAAc0H,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAqB,OAAXzN,EAAkB,GAAlB,kBAAkCA,KAC7H0F,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAI5B+D,WARoB,WAShB,OAAOwF,IAASC,IAAT,qBACFH,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAI5ByI,SAfoB,SAeXK,GACL,OAAOS,IAASC,IAAT,iBAAwCV,IAC1CO,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAI5B0I,OAtBoB,SAsBbI,GACH,OAAOS,IAASsB,KAAT,iBAAyC/B,IAC3CO,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SAI5B2I,SA7BoB,SA6BXG,GACL,OAAOS,IAAS8H,OAAT,iBAA0BvI,IAAUO,MAAK,SAAAI,GAC5C,OAAOA,EAASzJ,W,gCCjCb,QAA0B,0C,gMCW5BsR,EAAU,WAEf,OAAO/H,IAASC,IAAT,WACFH,MAAK,SAAAI,GAAQ,OAAIA,EAASzJ,SAH1BsR,EAAU,SAMbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOnI,IAASsB,KAAT,aAAyG,CAAC0G,QAAOC,WAAUC,aAAYC,YACzIrI,MAAK,SAAAI,GAAQ,OAAIA,EAASzJ,SAR1BsR,EAAU,WAYf,OAAO/H,IAAS8H,OAAT,cACFhI,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SCnBnB2R,EAAc,WAEnB,OAAOpI,IAASC,IAAT,4BACFH,MAAK,SAAAI,GACF,OAAOA,EAASzJ,SCC1B5B,EAAe,CACjB0K,OAAQ,KACRyI,MAAO,KACP1D,MAAO,KACP+D,WAAY,KACZ3E,QAAQ,GAiBCpO,EACQ,SAACiK,EAAuByI,EAAsB1D,EAAsBZ,GAApE,MAAyF,CACtGxO,KAAM,gBACNyC,QAAS,CAAC4H,SAAQyI,QAAO1D,QAAOZ,YAH3BpO,EAKa,SAAC+S,GAAD,MAAyB,CAACnT,KAAM,0BAA2ByC,QAAS,CAAC0Q,gBAGlF1B,EAAkB,WAC3B,8CAAO,WAAO7O,GAAP,yBAAAI,EAAA,+EAEoB6P,IAFpB,QAEOtR,EAFP,QAIUmN,aAAeC,IAAYC,UAAU,EACfrN,EAAKA,KAAzBd,EADkC,EAClCA,GAAI2O,EAD8B,EAC9BA,MAAO0D,EADuB,EACvBA,MAClBlQ,EAASxC,EAAwBK,EAAIqS,EAAO1D,GAAO,KANxD,gDASOzO,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAVlC,yDAAP,uDAeSyO,EAAQ,SAAC0D,EAAeC,EAAkBC,EAAqBC,GACxE,8CAAO,WAAOrQ,GAAP,mBAAAI,EAAA,+EAEoB6P,EAAcC,EAAOC,EAAUC,EAAYC,GAF/D,WAEO1R,EAFP,QAIUmN,aAAeC,IAAYC,QAJrC,gCAKWhM,EAAS6O,KALpB,iCAOSlQ,EAAKmN,aAAe0E,IAAsBC,kBAPnD,kCAQezQ,EAAS0Q,KARxB,QAUW3S,EAAUY,EAAKiB,SAASe,OAAS,EAAIhC,EAAKiB,SAAS,GAAK,aAE9DI,EAASmM,YAAW,QAAS,CAACC,OAAQrO,KAZ3C,0DAeOA,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAhBlC,0DAAP,uDAqBS2S,EAAgB,WACzB,8CAAO,WAAO1Q,GAAP,mBAAAI,EAAA,+EAEoBkQ,IAFpB,OAEO3R,EAFP,OAGO4R,EAAa5R,EAAKwD,IACxBnC,EAASxC,EAA6B+S,IAJvC,gDAMOxS,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAPlC,yDAAP,uDAYS0O,EAAS,WAClB,8CAAO,WAAOzM,GAAP,eAAAI,EAAA,+EAEoB6P,IAFpB,cAIUnE,aAAeC,IAAYC,SAChChM,EAASxC,EAAwB,KAAM,KAAM,MAAM,IALxD,gDAQOO,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IATlC,yDAAP,uDAcWsP,IAxFK,WAAmE,IAAlE/P,EAAiE,uDAAzDP,EAAcG,EAA2C,uCAClF,OAAQA,EAAOE,MACX,IAAK,gBACL,IAAK,0BACD,OAAO,2BACAE,GACAJ,EAAO2C,SAGlB,QACI,OAAOvC,K,kPCjBbP,EAAe,CACjB4T,MAAO,GACPb,SAAU,GACVc,gBAAiB,EACjBf,YAAa,EACb/M,WAAW,EACX+N,kBAAmB,GACnBnR,OAAQ,CACJqQ,KAAM,GACNzN,OAAQ,MAEZ8E,UAAU,GA4ED5J,EACgB,SAACsF,EAAoB2E,GAArB,MAAyC,CAC9DrK,KAAM,4BACN0F,YACA2E,WAJKjK,EAMC,SAACmT,GAAD,MAA6B,CAACvT,KAAM,YAAauT,UANlDnT,EAOQ,SAACsF,GAAD,MAAyB,CAAC1F,KAAM,oBAAqB0F,cAP7DtF,EAQW,SAACsT,GAAD,MAAyB,CAAC1T,KAAM,wBAAyB0T,eARpEtT,EASO,SAACuT,GAAD,MAAyB,CAAC3T,KAAM,mBAAoB2T,eAT3DvT,EAUE,SAACkC,GAAD,MAAyB,CAACtC,KAAM,aAAcyC,QAASH,IAVzDlC,EAWM,SAACiK,GAAD,MAAqB,CAACrK,KAAM,SAAUqK,WAX5CjK,EAYQ,SAACiK,GAAD,MAAqB,CAACrK,KAAM,WAAYqK,WAZhDjK,EAaC,SAAC4J,GAAD,MAAwB,CAAChK,KAAM,YAAagK,aAG7CwI,EAAW,SAACC,EAAqBC,EAAkBpQ,GAC5D,8CAAO,WAAOM,GAAP,iBAAAI,EAAA,sEAECJ,EAASxC,GAAwB,IACjCwC,EAASxC,EAAuBqS,IAChC7P,EAASxC,EAAkBkC,IAJ5B,SAKoBgQ,IAASE,SAASC,EAAaC,EAAUpQ,EAAOqQ,KAAMrQ,EAAO4C,QALjF,OAKO3D,EALP,OAMCqB,EAASxC,GAAwB,IACjCwC,EAASxC,EAAiBmB,EAAKgR,QAC/B3P,EAASxC,EAA2BmB,EAAKmS,aAR1C,kDAUO/S,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAXlC,0DAAP,uDAgBSmN,EAAiB,SAACzD,GAC3B,8CAAO,WAAOzH,GAAP,iBAAAI,EAAA,+EAEoBsP,IAAStI,SAASK,GAFtC,OAEO9I,EAFP,OAICqB,EAASxC,EAAiBmB,IAJ3B,gDAMOZ,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAPlC,yDAAP,uDAYSsJ,EAAS,SAACI,GACnB,8CAAO,WAAOzH,GAAP,eAAAI,EAAA,sEAECJ,EAASxC,GAAgC,EAAMiK,IAFhD,SAGoBiI,IAASrI,OAAOI,GAHpC,iBAKUqE,aAAeC,IAAYC,QALrC,wBAMKhM,EAASxC,EAAsBiK,IAC/BzH,EAASxC,GAAiB,IAP/B,UAQWwC,EAASmD,eARpB,QAUCnD,EAASxC,GAAgC,EAAOiK,IAVjD,kDAYO1J,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAblC,0DAAP,uDAkBSuJ,EAAW,SAACG,GACrB,8CAAO,WAAOzH,GAAP,eAAAI,EAAA,sEAECJ,EAASxC,GAAgC,EAAMiK,IAFhD,SAGoBiI,IAASpI,SAASG,GAHtC,iBAKUqE,aAAeC,IAAYC,QALrC,wBAMKhM,EAASxC,EAAwBiK,IACjCzH,EAASxC,GAAiB,IAP/B,UAQWwC,EAASmD,eARpB,QAUCnD,EAASxC,GAAgC,EAAOiK,IAVjD,kDAYO1J,EAAU,KAAEA,QAClBiC,EAAS9C,IAAOC,YAAW,EAAMY,IAblC,0DAAP,uDAkBWqP,IA7JM,WAAmE,IAAlE9P,EAAiE,uDAAzDP,EAAcG,EAA2C,uCACnF,OAAQA,EAAOE,MACX,IAAK,YACD,OAAO,2BACAE,GADP,IAEIqT,MAAOzT,EAAOyT,QAGtB,IAAK,mBACD,OAAO,2BACArT,GADP,IAEIuS,YAAa3S,EAAO6T,aAG5B,IAAK,aACD,OAAO,2BACAzT,GADP,IAEIoC,OAAQxC,EAAO2C,UAGvB,IAAK,wBACD,OAAO,2BACAvC,GADP,IAEIsT,gBAAiB1T,EAAO4T,aAGhC,IAAK,oBACD,OAAO,2BACAxT,GADP,IAEIwF,UAAW5F,EAAO4F,YAG1B,IAAK,4BACD,OAAO,2BACAxF,GADP,IAEIuT,kBAAmB3T,EAAO4F,UAAP,sBACTxF,EAAMuT,mBADG,CACgB3T,EAAOuK,SACpCnK,EAAMuT,kBAAkBnR,QAAO,SAAA7B,GAAE,OAAIA,IAAOX,EAAOuK,YAGjE,IAAK,YACD,OAAO,2BACAnK,GADP,IAEI8J,SAAUlK,EAAOkK,WAGzB,IAAK,SACD,OAAO,2BACA9J,GADP,IAEIqT,MAAOrT,EAAMqT,MAAMpQ,KAAI,SAAAyQ,GACnB,OAAIA,EAAKnT,KAAOX,EAAOuK,OACZ,2BAAIuJ,GAAX,IAAiBC,UAAU,IAExBD,OAInB,IAAK,WACD,OAAO,2BACA1T,GADP,IAEIqT,MAAOrT,EAAMqT,MAAMpQ,KAAI,SAAAyQ,GACnB,OAAIA,EAAKnT,KAAOX,EAAOuK,OACZ,2BAAIuJ,GAAX,IAAiBC,UAAU,IAExBD,OAInB,QACI,OAAO1T,K,mBC9FnBT,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,mBAAmB,OAAS,qBAAqB,QAAU,wB,mBCA5ID,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,yB,mBCA7HD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,SAAW,2B,mBCA/FD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,uB,+BCDvF,0GAoBYiP,EAIAyE,EAxBZ,SAaatI,EAbb,OAawBgJ,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,2C,SAGPvF,O,qBAAAA,I,kBAAAA,M,cAIAyE,O,2CAAAA,M,sCCtBZ,oEAAO,IAAMrG,EAAoC,SAACvF,GAC9C,IAAIA,EAIJ,MAAO,kBAGEiF,EAAmB,SAAC0H,GAAD,OAA2C,SAAC3M,GACxE,GAAIA,GAASA,EAAMjE,OAAS4Q,EACxB,MAAM,iBAAN,OAAwBA,EAAxB,gB","file":"static/js/main.fe33f218.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1J6m0\",\"profileLoading\":\"profile_profileLoading__6b-v7\",\"photo\":\"profile_photo__1Sw9L\",\"upload\":\"profile_upload__3MOeI\",\"follow\":\"profile_follow__1QmCd\",\"unfollow\":\"profile_unfollow__23k1L\",\"info\":\"profile_info__1XW5B\",\"status\":\"profile_status__3r-jF\",\"data\":\"profile_data__3iiHG\",\"button\":\"profile_button__jGi_t\",\"dataItem\":\"profile_dataItem__2CDL6\",\"dataItemName\":\"profile_dataItemName__3KMiB\",\"dataItemCheck\":\"profile_dataItemCheck__2QLfe\",\"dataItemContacts\":\"profile_dataItemContacts__lxXNs\",\"dataItemField\":\"profile_dataItemField__1EQxQ\",\"contacts\":\"profile_contacts__3JCNb\",\"field\":\"profile_field__AP8Tm\",\"fieldText\":\"profile_fieldText__2LKmb\",\"social\":\"profile_social__3CJJu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"posts_posts__29oo6\",\"addPost\":\"posts_addPost__3cpu9\"};","import {InferActionTypes} from '../store'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof action>\n\nconst initialState = {\n    error: false,\n    errorMessage: null as null | string\n}\n\nconst errorReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'CATCH_ERROR':\n            return {\n                ...state,\n                error: action.error,\n                errorMessage: action.errorMessage\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const action = {\n    catchError: (error: boolean, errorMessage: null | string) => ({type: 'CATCH_ERROR', error, errorMessage} as const)\n}\n\nexport default errorReducer\n","import {InferActionTypes} from '../store'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof initialState\nexport type MessagesType = {\n    id: string\n    message: string\n}\ntype ActionsTypes = InferActionTypes<typeof actions>\n\nconst initialState = {\n    messagesData: [] as MessagesType[]\n}\n\nconst messagesReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SEND_MESSAGE':\n            let newMessage = {\n                id: v1(),\n                message: action.newMessageText\n            }\n            return {\n                ...state,\n                messagesData: [...state.messagesData, newMessage]\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageText: string) => ({type: 'SEND_MESSAGE', newMessageText} as const)\n}\n\nexport default messagesReducer\n","export type ChatMessageAPIType = {\n\tmessage: string\n\tphoto: string\n\tuserId: number\n\tuserName: string\n}\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\ntype EventsNamesTypes = 'message-received' | 'status-changed'\nexport type StatusType = 'Pending' | 'Ready' | 'Error'\n\nconst subscribers = {\n\t'message-received': [] as MessagesReceivedSubscriberType[],\n\t'status-changed': [] as StatusChangedSubscriberType[]\n}\nlet ws: WebSocket | null\n\nconst closeHandler = () => {\n\tnotifySubscribers('Pending')\n\tsetTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n\tconst newMessages = JSON.parse(e.data)\n\tsubscribers['message-received'].forEach(subscriber => subscriber(newMessages))\n}\nconst openHandler = () => {\n\tnotifySubscribers('Ready')\n}\nconst errorHandler = () => {\n\tnotifySubscribers('Error')\n}\nconst cleanUp = () => {\n\tws?.removeEventListener('close', closeHandler)\n\tws?.removeEventListener('message', messageHandler)\n\tws?.removeEventListener('open', openHandler)\n\tws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribers = (status: StatusType) => {\n\tsubscribers['status-changed'].forEach(subscriber => subscriber(status))\n}\nconst createChannel = () => {\n\tcleanUp()\n\tws?.close()\n\tws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n\tnotifySubscribers('Pending')\n\tws?.addEventListener('close', closeHandler)\n\tws?.addEventListener('message', messageHandler)\n\tws?.addEventListener('open', openHandler)\n\tws?.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n\tstart() {\n\t\tcreateChannel()\n\t},\n\n\tstop() {\n\t\tsubscribers['message-received'] = []\n\t\tsubscribers['status-changed'] = []\n\t\tcleanUp()\n\t\tws?.close()\n\t},\n\n\tsubscribe(eventName: EventsNamesTypes, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n\t\t// @ts-ignore\n\t\tsubscribers[eventName].push(callback)\n\t\treturn () => {\n\t\t\t// @ts-ignore\n\t\t\tsubscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback)\n\t\t}\n\t},\n\n\tunsubscribe(eventName: EventsNamesTypes, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n\t\t// @ts-ignore\n\t\tsubscribers[eventName] = subscribers[eventName].filter(subscriber => subscriber !== callback)\n\t},\n\n\tsendMessage(message: string) {\n\t\tws?.send(message)\n\t}\n}\n","import {action} from './errorReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../../api/chatApi'\nimport {Dispatch} from 'redux'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof  initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nconst initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'Pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages\n                    .map( m => ( {...m, id: v1()} ) )]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n\n        case 'CLEAR_MESSAGES':\n            return {\n                ...state,\n                messages: action.payload.messages\n            }\n\n        case 'STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({type: 'MESSAGES_RECEIVED', payload: {messages}} as const),\n    statusChanged: (status: StatusType) => ({type: 'STATUS_CHANGED', payload: {status}} as const),\n    clearMessages: (messages: ChatMessageType[]) => ({type: 'CLEAR_MESSAGES', payload: {messages}} as const)\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.start()\n            chatAPI.subscribe('message-received', newMessageHandlerCreator(dispatch))\n            chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const stopMessagesListening = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.unsubscribe('message-received', newMessageHandlerCreator(dispatch))\n            chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n            chatAPI.stop()\n            dispatch(actions.clearMessages([]))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const sendMessage = (message: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            chatAPI.sendMessage(message)\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default chatReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_loading__1Af0M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__OQwvZ\"};","import {getAuthUserData} from './authReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {action} from './errorReducer'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    initialized: false\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'INITIALIZED':\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'INITIALIZED'} as const)\n}\n\nexport const initializeApp = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const promise = dispatch(getAuthUserData())\n\n            Promise.all([promise]).then(() => {\n                dispatch(actions.initializedSuccess())\n            })\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default appReducer\n","import React, {ComponentType} from 'react'\nimport Loading from '../components/common/loading/Loading'\n\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\n    return (props: WCP) => {\n        return (\n            <React.Suspense fallback={<Loading />}>\n                <WrappedComponent {...props} />\n            </React.Suspense>\n        )\n    }\n}\n","export default __webpack_public_path__ + \"static/media/vk.e9553eae.svg\";","export default __webpack_public_path__ + \"static/media/github.9544f549.svg\";","import React, {FC} from 'react'\nimport footerClasses from './footer.module.css'\nimport vkIcon from './../../assets/img/vk.svg'\nimport githubIcon from './../../assets/img/github.svg'\n\nconst Footer: FC = () => {\n    return (\n        <footer className={footerClasses.footer}>\n\n            <div className={footerClasses.leftCol}>\n                <ul>\n                    <li>\n                        <a href=\"https://vk.com/maxim.abuzarov\" target='_blank' rel=\"noreferrer\">\n                            <img src={vkIcon} alt=\"VK icon\"/>\n                            <span>VK</span>\n                        </a>\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        <a href=\"https://github.com/maxim-abuzarov\" target='_blank' rel=\"noreferrer\">\n                            <img src={githubIcon} alt=\"Github icon\"/>\n                            <span>GitHub</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n\n            <div className={footerClasses.rightCol}>\n                <p>\t&copy; Abuzarov Maxim, 2021</p>\n            </div>\n\n        </footer>\n    )\n}\n\nexport default Footer\n","export default __webpack_public_path__ + \"static/media/profile.d54ae6c5.svg\";","export default __webpack_public_path__ + \"static/media/messages.4a3a2c6a.svg\";","export default __webpack_public_path__ + \"static/media/users.9c5d22db.svg\";","export default __webpack_public_path__ + \"static/media/chat.d2e37373.svg\";","import React, {FC} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport friendClasses from './friend.module.css'\nimport avatar from './../../../assets/img/unknownUser.jpeg'\n\ntype PropsType = {\n    id: number\n    name: string\n    url: string | null\n}\n\nconst Friend: FC<PropsType> = ({id, name, url}) => {\n    return (\n        <NavLink to={'/profile/' + id} className={friendClasses.friend}>\n\n            <div className={friendClasses.name}>\n\n                {name.toLowerCase()}\n\n            </div>\n\n            <div className={friendClasses.photo}>\n\n                <img src={url ? url : avatar} alt='Friend avatar'/>\n\n            </div>\n\n        </NavLink>\n    )\n}\n\nexport default Friend\n","import {AppStateType} from '../store'\n\nexport const getFriends = (state: AppStateType) => {\n\treturn state.aside.friends\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n\treturn state.aside.isLoading\n}\n","import React, {FC, useEffect} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport navigationClasses from './navigation.module.css'\nimport profileIcon from './../../assets/img/profile.svg'\nimport messagesIcon from './../../assets/img/messages.svg'\nimport usersIcon from './../../assets/img/users.svg'\nimport chatIcon from './../../assets/img/chat.svg'\nimport Friend from './friends/Friend'\nimport Loading from '../common/loading/Loading'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {getFriends, getIsLoading} from '../../redux/selectors/navigationSelectors'\nimport {getFriendsList} from '../../redux/reducers/asideReducer'\n\nconst Navigation: FC = () => {\n    const friends = useSelector(getFriends)\n    const isLoading = useSelector(getIsLoading)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const getFriend = () => {\n            dispatch(getFriendsList())\n        }\n        dispatch(getFriend)\n    }, [dispatch])\n\n    let friendsList = friends.map(friend => <Friend\n        key={friend.id}\n        id={friend.id}\n        name={friend.name}\n        url={friend.photos.large}\n    />)\n\n    return (\n        <nav className={navigationClasses.navigation}>\n            <ul>\n\n                <li>\n                    <NavLink to=\"/profile\" activeClassName={navigationClasses.active}>\n                        <img src={profileIcon} alt=\"Profile icon\"/>\n                        <span>Profile</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/messages\" activeClassName={navigationClasses.active}>\n                        <img src={messagesIcon} alt=\"Messages icon\"/>\n                        <span>Messages</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/users\" activeClassName={navigationClasses.active}>\n                        <img src={usersIcon} alt=\"Users icon\"/>\n                        <span>Users</span>\n                    </NavLink>\n                </li>\n\n                <li>\n                    <NavLink to=\"/chat\" activeClassName={navigationClasses.active}>\n                        <img src={chatIcon} alt=\"Chat icon\"/>\n                        <span>Chat</span>\n                    </NavLink>\n                </li>\n\n            </ul>\n\n            <div className={navigationClasses.friendsBlock}>\n\n                <div>\n                    <h1>Friends</h1>\n                </div>\n\n                <div className={navigationClasses.friends}>\n                    {isLoading\n                        ? <Loading />\n                        : friendsList.length !== 0\n                            ? friendsList\n                            : 'Follow somebody'\n                    }\n                </div>\n\n            </div>\n        </nav>\n    )\n}\n\nexport default Navigation\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\n\ntype PropsType = {\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatus: FC<PropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        if (props.isOwner) {\n            setEditMode(true)\n        }\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const handleFocus = (e: ChangeEvent<HTMLInputElement>) => {\n        e.target.select()\n    }\n\n    return (\n        <div>\n            {editMode\n                ?   <div> <input onBlur={deactivateEditMode}\n                                 autoFocus={true}\n                                 onFocus={handleFocus}\n                                 onChange={onStatusChange}\n                                 value={status} />\n                    </div>\n                :   <div onClick={activateEditMode}> {props.status\n                            ? props.status\n                            : 'There could be a status here, but...'}\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus\n","import React, {FC} from 'react'\nimport {Input, Textarea} from '../../../common/formsControl/FormsControl'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport formControlClasses from '../../../common/formsControl/formscontol.module.css'\nimport profileClasses from '../profile.module.css'\nimport {ProfileType} from '../../../../types/types'\n\ntype PropsType = {\n    profile: ProfileType\n}\n\nconst ProfileInfoForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\n                                                                                        handleSubmit,\n                                                                                        profile,\n                                                                                        error\n}) => {\n    return (\n        <form onSubmit={handleSubmit} className={profileClasses.data}>\n            <div className={profileClasses.dataItemName}>\n                <h1>Full Name:</h1>\n                <Field component={Input} name='fullName' placeholder='Full Name' className={profileClasses.field} />\n            </div>\n\n            <div className={profileClasses.dataItemCheck}>\n                <h1>Looking for a job:</h1>\n                <Field component={Input} name='lookingForAJob' type='checkbox'/>\n            </div>\n\n            <div className={profileClasses.dataItemField}>\n                <h1>Professional skills:</h1>\n                <Field component={Textarea} name='lookingForAJobDescription' placeholder='Professional skills' className={profileClasses.fieldText} />\n            </div>\n\n            <div className={profileClasses.dataItemField}>\n                <h1>About me:</h1>\n                <Field component={Textarea} name='aboutMe' placeholder='About me' className={profileClasses.fieldText} />\n            </div>\n\n            <div className={profileClasses.dataItemContacts}>\n                <h1>Contacts:</h1>\n                {Object.keys(profile.contacts).map(key => {\n                    return <div key={key} className={profileClasses.contacts}>\n                        <h2>{key}:</h2>\n                        <Field component={Input} name={'contacts.' + key} placeholder={key} className={profileClasses.social}/>\n                    </div>\n                })}\n            </div>\n\n            {error && <div className={formControlClasses.formSummaryError}>{error}</div>}\n\n            <div className={profileClasses.button}>\n                <button>Save</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<ProfileType, PropsType>({form: 'editProfile'})(ProfileInfoForm)\n","import React, {ChangeEvent, FC, useState} from 'react'\nimport profileClasses from './profile.module.css'\nimport avatar from './../../../assets/img/unknownUser.jpeg'\nimport Loading from '../../common/loading/Loading'\nimport ProfileStatus from './status/ProfileStatus'\nimport ProfileInfoForm from './info/ProfileInfoForm'\nimport {ProfilePropsType} from '../Content'\nimport {ContactsType, ProfileType} from '../../../types/types'\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Profile: FC<ProfilePropsType> = ({\n                                           profile,\n                                           savePhoto,\n                                           saveProfileData,\n                                           isOwner,\n                                           status,\n                                           updateStatus,\n                                           isFollow,\n                                           follow,\n                                           unfollow,\n                                           authorizedUserId\n}) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <div className={profileClasses.profileLoading}>\n            <Loading />\n        </div>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        saveProfileData(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <div className={profileClasses.profile}>\n\n            <div className={profileClasses.photo}>\n                <img src={profile.photos.large ? profile.photos.large : avatar} alt=\"Profile avatar\"/>\n                {profile.userId === authorizedUserId\n                    ? null\n                    : <div>\n                        {isFollow\n                            ? <button\n                                onClick={() => {\n                                    unfollow(profile.userId)\n                                }}\n                                className={profileClasses.unfollow}\n                            >Followed</button>\n                            : <button\n                                onClick={() => {\n                                    follow(profile.userId)\n                                }}\n                                className={profileClasses.follow}\n                            >Follow</button>\n                        }\n                    </div>\n                }\n\n                {isOwner\n                && <div className={profileClasses.upload}>\n                        <button>Add photo</button>\n                        <input type=\"file\" onChange={onMainPhotoSelected}/>\n                   </div>\n                }\n            </div>\n\n            <div className={profileClasses.info}>\n                <h2>{profile.fullName ? profile.fullName : 'Name'}</h2>\n\n                <div className={profileClasses.status}>\n                    <ProfileStatus status={status} isOwner={isOwner} updateStatus={updateStatus} />\n                </div>\n\n                {editMode\n                    ? <ProfileInfoForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileInfo profile={profile} isOwner={isOwner} goToEditMode={() => {setEditMode(true)}} />\n                }\n\n            </div>\n\n        </div>\n    )\n}\n\nconst ProfileInfo: FC<ProfileInfoType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div className={profileClasses.data}>\n            <div className={profileClasses.dataItem}>\n                <h1>Looking for a job: </h1>\n                <p>{profile.lookingForAJob ? 'Yes' : 'No'}</p>\n            </div>\n\n            <div className={profileClasses.dataItem}>\n                <h1>Professional skills:</h1>\n                <p>{profile.lookingForAJobDescription}</p>\n            </div>\n\n            <div className={profileClasses.dataItem}>\n                <h1>About me: </h1>\n                <p>{profile.aboutMe}</p>\n            </div>\n\n            <div className={profileClasses.dataItemContacts}>\n                <h1>Contacts:</h1>\n                {Object\n                    .keys(profile.contacts)\n                    .map((key => {return <Contacts\n                        key={key}\n                        contactTitle={key}\n                        contactValue={profile.contacts[key as keyof ContactsType]} />}))\n                }\n            </div>\n\n            {isOwner &&\n            <div className={profileClasses.button}>\n                <button onClick={goToEditMode}>Edit</button>\n            </div>\n            }\n\n        </div>\n    )\n}\n\nconst Contacts: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div>\n            {contactValue && <div className={profileClasses.contacts}>\n                <h2>{contactTitle\n                    ? contactValue && contactTitle\n                    : null}\n                </h2>\n                <a href={contactValue} target='_blank' rel=\"noreferrer\">{contactValue}</a>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default Profile\n","import {PhotosType, ProfileType} from '../types/types'\nimport {instance, APIResponseType} from './api'\n\ntype SavePhotoResponseType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status/`, {status: status})\n            .then(response => {\n                return response.data\n            })\n    },\n\n    savePhoto(photoFile: File) {\n        const formData = new FormData()\n        formData.append('image', photoFile)\n\n        return instance.put<APIResponseType<SavePhotoResponseType>>(`profile/photo`, formData)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    saveProfileData(profileData: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profileData).then(response => {\n            return response.data\n        })\n    }\n}\n","import avatar from './../../assets/img/unknownUser.jpeg'\nimport {stopSubmit} from 'redux-form'\nimport {action} from './errorReducer'\nimport {PhotosType, PostType, ProfileType} from '../../types/types'\nimport {profileAPI} from '../../api/profileAPI'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {ResultCodes} from '../../api/api'\nimport {v1} from 'uuid'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit> | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    postsData: [] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'ADD_POST':\n            let newPost = {\n                id: v1(),\n                author: 'Maxim Abuzarov',\n                date: '30 Aug 2021',\n                title: 'Post #1',\n                url: avatar,\n                text: action.newPostText\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost]\n            }\n\n        case 'SET_USER_PROFILE':\n            return {\n                ...state,\n                profile: action.profile\n            }\n\n        case 'SET_STATUS':\n            return {\n                ...state,\n                status: action.status\n            }\n\n        case 'SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.getProfile(userId)\n            dispatch(actions.setUserProfile(data))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const getStatus = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.getStatus(userId)\n            dispatch(actions.setStatus(data))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const updateStatus = (status: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.updateStatus(status)\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.setStatus(status))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await profileAPI.savePhoto(file)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.savePhotoSuccess(data.data.photos))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const saveProfileData = (profileData: ProfileType): ThunkType => {\n    return async (dispatch, getState) => {\n        try {\n            const userId = getState().auth.userId\n            const data = await profileAPI.saveProfileData(profileData)\n\n            if (data.resultCode === ResultCodes.Success) {\n                if (userId !== null) {\n                    await dispatch(getUserProfile(userId))\n                } else {\n                    const message = `User's id can't be null`\n                    dispatch(action.catchError(true, message))\n                }\n            } else {\n                dispatch(stopSubmit('editProfile', {_error: data.messages[0]}))\n\n                return Promise.reject(data.messages[0])\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default profileReducer\n","import React, {FC} from 'react'\nimport postClasses from './post.module.css'\n\ntype PropsType = {\n    url: string | undefined\n    author: string\n    date: string\n    title: string\n    text: string\n}\n\nconst Post: FC<PropsType> = ({url, author, date, title, text}) => {\n    return (\n        <div className={postClasses.post}>\n            <div className={postClasses.header}>\n\n                <div className={postClasses.left}>\n                    <img src={url} alt=\"Author avatar\"/>\n                </div>\n\n                <div className={postClasses.author}>\n                    <h4>{author}</h4>\n                    <p>{date}</p>\n                </div>\n\n            </div>\n\n            <div className={postClasses.content}>\n                <h2>{title}</h2>\n                <p>{text}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n","import {maxLengthCreator, requiredField} from '../../../../utils/validators/validators'\nimport {Field, FormAction, InjectedFormProps, reduxForm, reset} from 'redux-form'\nimport {Textarea} from '../../../common/formsControl/FormsControl'\nimport React, {FC} from 'react'\nimport { NewPostValuesFormType } from '../Posts'\n\ntype PropsType = {}\n\nconst maxLength30 = maxLengthCreator(30) // create validator of max length\nconst afterSubmit = (result: any, dispatch: (arg0: FormAction) => any) => dispatch(reset('postForm'))\n\nconst PostForm: FC<InjectedFormProps<NewPostValuesFormType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field name='newPostText' component={Textarea} placeholder='Add your post' validate={[requiredField, maxLength30]} />\n            <div><button>Add</button></div>\n        </form>\n    )\n}\n\nexport const AddPostForm = reduxForm<NewPostValuesFormType, PropsType>({form: 'postForm', onSubmitSuccess: afterSubmit})(PostForm)\n","import React, {FC} from 'react'\nimport postsClasses from './posts.module.css'\nimport Post from './post/Post'\nimport {AddPostForm} from './addPostForm/AddPostForm'\nimport {PostType} from '../../../types/types'\n\nexport type NewPostValuesFormType = {\n    newPostText: string\n}\nexport type MapPropsType = {\n    posts: PostType[]\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\ntype PropsType = MapPropsType & DispatchPropsType\n\nconst Posts: FC<PropsType> = (props) => {\n    let posts = [...props.posts]\n        .reverse()\n        .map(post => <Post\n        key={post.id}\n        author={post.author}\n        date={post.date}\n        title={post.title}\n        text={post.text}\n        url={post.url}\n    />)\n\n    let addPost = (values: NewPostValuesFormType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={postsClasses.posts}>\n            <div>\n                <h1>Add post</h1>\n            </div>\n\n            <div className={postsClasses.addPost}>\n                <AddPostForm onSubmit={addPost} />\n            </div>\n\n            {posts}\n        </div>\n    )\n}\n\nexport default Posts\n","import {actions} from '../../../redux/reducers/profileReducer'\nimport Posts, {DispatchPropsType, MapPropsType} from './Posts'\nimport {connect} from 'react-redux'\nimport {AppStateType} from '../../../redux/store'\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.postsData,\n    }\n}\n\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps,\n    {addPost: actions.addPost}\n) (Posts)\n","import React, {FC} from 'react'\nimport Profile from './profile/Profile'\nimport PostsContainer from './posts/PostsContainer'\nimport {ProfileType} from '../../types/types'\n\nexport type ProfilePropsType = {\n    profile: ProfileType | null\n    saveProfileData: (profile: ProfileType) => Promise<any>\n    savePhoto: (file: File) => void\n    isOwner: boolean\n    status: string\n    updateStatus: (status: string) => void\n    isFollow: boolean\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    authorizedUserId: number | null\n}\n\nconst Content: FC<ProfilePropsType> = ({\n                                           profile,\n                                           saveProfileData,\n                                           savePhoto,\n                                           isOwner,\n                                           status,\n                                           updateStatus,\n                                           isFollow,\n                                           follow,\n                                           unfollow,\n                                           authorizedUserId\n}) => {\n    return (\n        <aside>\n\n            <Profile profile={profile}\n                     saveProfileData={saveProfileData}\n                     savePhoto={savePhoto}\n                     isOwner={isOwner}\n                     status={status}\n                     updateStatus={updateStatus}\n                     isFollow={isFollow}\n                     follow={follow}\n                     unfollow={unfollow}\n                     authorizedUserId={authorizedUserId}\n            />\n\n            <PostsContainer />\n\n        </aside>\n    )\n}\n\nexport default Content\n","import React, {ComponentType} from 'react'\nimport Content from './Content'\nimport {connect} from 'react-redux'\nimport {getStatus, getUserProfile, savePhoto, saveProfileData, updateStatus} from '../../redux/reducers/profileReducer'\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\nimport {compose} from 'redux'\nimport {AppStateType} from '../../redux/store'\nimport {ProfileType} from '../../types/types'\nimport {follow, isFollowedUser, unfollow} from '../../redux/reducers/usersReducer'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (text: string) => void\n    savePhoto: (file: File) => void\n    saveProfileData: (profile: ProfileType) => Promise<any>\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    isFollowedUser: (userId: number) => void\n}\ntype PathParamsType = {\n    userId: string\n}\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ContentContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId as number)\n        this.props.isFollowedUser(userId as number)\n        this.props.getStatus(userId as number)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return <Content\n            {...this.props}\n            profile={this.props.profile}\n            saveProfileData={this.props.saveProfileData}\n            savePhoto={this.props.savePhoto}\n            isOwner={!this.props.match.params.userId}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            isFollow={this.props.isFollow}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow}\n            authorizedUserId={this.props.authorizedUserId}\n        />\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n        isFollow: state.usersPage.isFollow,\n    }\n}\n\nexport default compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfileData, follow, unfollow, isFollowedUser})\n)(ContentContainer)\n","export default __webpack_public_path__ + \"static/media/logo.224ee00a.svg\";","import React from 'react'\nimport logo from './../../assets/img/logo.svg'\nimport headerClasses from './header.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {FC} from 'react'\n\nexport type MapPropsTypes = {\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\nexport type DispatchPropsTypes = {\n    logout: () => void\n}\n\nconst Header: FC<MapPropsTypes & DispatchPropsTypes> = ({isAuth, login, logout}) => {\n    return (\n        <header className={headerClasses.header}>\n\n            <div className={headerClasses.logotype}>\n                <NavLink to='/profile'>\n                    <img src={logo} alt=\"M logotype\"/>\n                </NavLink>\n            </div>\n\n            <div className={headerClasses.login}>\n                {isAuth\n                    ? <h1>{login} <button className={headerClasses.logout} onClick={logout}>Logout</button></h1>\n                    : <NavLink to='/login'>Login</NavLink>\n                }\n            </div>\n\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport Header, {DispatchPropsTypes, MapPropsTypes} from './Header'\nimport {connect} from 'react-redux'\nimport {logout} from '../../redux/reducers/authReducer'\nimport {AppStateType} from '../../redux/store'\n\nclass HeaderContainer extends React.Component<MapPropsTypes & DispatchPropsTypes> {\n    render() {\n        return <Header {...this.props} />\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\nexport default connect(mapStateToProps,\n    {logout}\n) (HeaderContainer)\n","import React, {FC} from 'react'\nimport errorClasses from './error.module.css'\n\ntype PropsType = {\n    errorMessage: string | null\n}\n\nconst Error: FC<PropsType> = ({errorMessage}) => {\n    return (\n        <div className={errorClasses.error}>\n            <p>{errorMessage}</p>\n        </div>\n    )\n}\n\nexport default Error\n","import {Action, applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport {reducer as formReducer} from 'redux-form'\nimport profileReducer from './reducers/profileReducer'\nimport messagesReducer from './reducers/messagesReducer'\nimport asideReducer from './reducers/asideReducer'\nimport usersReducer from './reducers/usersReducer'\nimport authReducer from './reducers/authReducer'\nimport appReducer from './reducers/appReducer'\nimport errorReducer from './reducers/errorReducer'\nimport chatReducer from './reducers/chatReducer'\n\n// types for all app state\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types for actions\nexport type InferActionTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\n// types for thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: messagesReducer,\n    aside: asideReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    error: errorReducer,\n    chat: chatReducer,\n    form: formReducer\n})\n\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport default store\n","import React, {ComponentType, FC} from 'react'\nimport {compose} from 'redux'\nimport {HashRouter, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport {connect, Provider} from 'react-redux'\nimport {initializeApp} from './redux/reducers/appReducer'\nimport {withSuspense} from './hoc/withSuspense'\nimport './App.css'\nimport Footer from './components/footer/Footer'\nimport Navigation from './components/navigation/Navigation'\nimport ContentContainer from './components/content/ContentContainer'\nimport HeaderContainer from './components/header/HeaderContainer'\nimport Loading from './components/common/loading/Loading'\nimport Error from './components/common/error/Error'\nimport store, {AppStateType} from './redux/store'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\n// components for lazy loading\nconst MessagesContainer = React.lazy(() => import('./components/messages/MessagesContainer'))\nconst Users = React.lazy(() => import('./components/users/Users'))\nconst LoginPage = React.lazy(() => import('./components/login/Login'))\nconst ChatPage = React.lazy(() => import('./pages/chat/ChatPage'))\n\nconst SuspendedMessagesPage = withSuspense(MessagesContainer)\nconst SuspendedUsersPage = withSuspense(Users)\nconst SuspendedLoginPage = withSuspense(LoginPage)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Loading />\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer />\n                {this.props.error && <Error errorMessage={this.props.errorMessage}/>}\n                <Navigation />\n                <div className='app-content'>\n                    <Switch>\n                        <Route exact path='/' render={ () => <Redirect to='/profile' />} />\n                        <Route path='/profile/:userId?' render={ () => <ContentContainer /> }/>\n                        <Route path='/messages' render={ () => <SuspendedMessagesPage />}/>\n                        <Route path='/users' render={ () => <SuspendedUsersPage />}/>\n                        <Route path='/login' render={ () => <SuspendedLoginPage />}/>\n                        <Route path='/chat' render={ () => <SuspendedChatPage />}/>\n                        <Route path='*' render={ () => <div className='page404'>404 :(</div> }/>\n                    </Switch>\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.error.error,\n        errorMessage: state.error.errorMessage\n    }\n}\n\nconst AppContainer =  compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n) (App)\n\nconst SocialNetworkApp: FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    )\n}\n\nexport default SocialNetworkApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SocialNetworkApp from './App'\n\nReactDOM.render(<SocialNetworkApp />, document.getElementById('root'))\n","import React, {FC} from 'react'\nimport loadingClasses from './loading.module.css'\n\nconst Loading: FC = () => {\n    return (\n        <div className={loadingClasses.loading}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n}\n\nexport default Loading\n","import React, {FC} from 'react'\nimport formControlClasses from './formscontol.module.css'\nimport {WrappedFieldProps} from 'redux-form'\n\nexport const Textarea: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={formControlClasses.formControl + ' ' + (hasError ? formControlClasses.error : '')}>\n            <textarea {...input} {...props} />\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Input: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={formControlClasses.formControl + ' ' + (hasError ? formControlClasses.error : '')}>\n            <input {...input} {...props} />\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"navigation_navigation__unRcd\",\"active\":\"navigation_active__3_qnU\",\"friendsBlock\":\"navigation_friendsBlock__E3nj3\",\"friends\":\"navigation_friends__2ayIw\"};","import {action} from './errorReducer'\nimport {UserType} from '../../types/types'\nimport {usersAPI} from '../../api/usersAPI'\nimport {BaseThunkType, InferActionTypes} from '../store'\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    friends: [] as UserType[],\n    isLoading: false\n}\n\nconst asideReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'GET_FRIENDS':\n            return {\n                ...state,\n                friends: action.friends\n            }\n\n        case 'TOGGLE_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    getFriends: (friends: UserType[]) => ({type: 'GET_FRIENDS', friends} as const),\n    toggleIsLoading: (isLoading: boolean) => ({type: 'TOGGLE_IS_LOADING', isLoading} as const)\n}\n\nexport const getFriendsList = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleIsLoading(true))\n            const data = await usersAPI.getFriends()\n            dispatch(actions.toggleIsLoading(false))\n            dispatch(actions.getFriends(data.items))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default asideReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formscontol_formControl__3GBCo\",\"error\":\"formscontol_error__3T9u-\",\"formSummaryError\":\"formscontol_formSummaryError__ulmBQ\"};","import {GetItemsType, instance, APIResponseType} from './api'\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 12, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getFriends() {\n        return instance.get<GetItemsType>(`users?friend=true`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    isFollow(userId: number) {\n        return instance.get<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(response => {\n            return response.data\n        }) as Promise<APIResponseType>\n    }\n}\n","export default __webpack_public_path__ + \"static/media/unknownUser.6cf2a92e.jpeg\";","import {instance, APIResponseType, ResultCodes, ResultCodesForCaptcha} from './api'\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    authMe() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\n            .then(response => response.data)\n    },\n\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodes | ResultCodesForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(response => response.data)\n    },\n\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(response => {\n                return response.data\n            }) as Promise<APIResponseType>\n    }\n}\n","import {instance} from './api'\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\n            .then(response => {\n                return response.data\n            })\n    }\n}\n","import {ResultCodes, ResultCodesForCaptcha} from '../../api/api'\nimport {stopSubmit} from 'redux-form'\nimport {action} from './errorReducer'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {authAPI} from '../../api/authAPI'\nimport {securityAPI} from '../../api/securityAPI'\n\ntype InitialStateType = typeof  initialState\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit> | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    userId: null as null | number,\n    email: null as null | string,\n    login: null as null | string,\n    captchaUrl: null as null | string,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_USER_DATA':\n        case 'GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SET_USER_DATA',\n        payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\n}\n\nexport const getAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.authMe()\n\n            if (data.resultCode === ResultCodes.Success) {\n                const {id, login, email} = data.data\n                dispatch(actions.setAuthUserData(id, email, login, true))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.login(email, password, rememberMe, captcha)\n\n            if (data.resultCode === ResultCodes.Success) {\n                await dispatch(getAuthUserData())\n            } else {\n                if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\n                    await dispatch(getCaptchaUrl())\n                }\n                const message = data.messages.length > 0 ? data.messages[0] : 'Wrong data'\n\n                dispatch(stopSubmit('login', {_error: message}))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await securityAPI.getCaptchaUrl()\n            const captchaUrl = data.url\n            dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const logout = (): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await authAPI.logout()\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.setAuthUserData(null, null, null, false))\n            }\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default authReducer\n","import {getFriendsList} from './asideReducer'\nimport {action} from './errorReducer'\nimport {UserType} from '../../types/types'\nimport {BaseThunkType, InferActionTypes} from '../store'\nimport {usersAPI} from '../../api/usersAPI'\nimport {ResultCodes} from '../../api/api'\n\nexport type InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof action.catchError>>\n\nconst initialState = {\n    users: [] as UserType[],\n    pageSize: 12,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isLoading: false,\n    followingProgress: [] as number[], // array of users ids\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    },\n    isFollow: false\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.users\n            }\n\n        case 'SET_CURRENT_PAGE':\n            return {\n                ...state,\n                currentPage: action.pageNumber\n            }\n\n        case 'SET_FILTER':\n            return {\n                ...state,\n                filter: action.payload\n            }\n\n        case 'SET_TOTAL_USERS_COUNT':\n            return {\n                ...state,\n                totalUsersCount: action.totalCount\n            }\n\n        case 'TOGGLE_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading\n            }\n\n        case 'TOGGLE_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingProgress: action.isLoading\n                    ? [...state.followingProgress, action.userId]\n                    : state.followingProgress.filter(id => id !== action.userId)\n            }\n\n        case 'IS_FOLLOW':\n            return {\n                ...state,\n                isFollow: action.isFollow\n            }\n\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: true}\n                    }\n                    return user\n                })\n            }\n\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: false}\n                    }\n                    return user\n                })\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    toggleFollowingProgress: (isLoading: boolean, userId: number) => ({\n        type: 'TOGGLE_FOLLOWING_PROGRESS',\n        isLoading,\n        userId\n    } as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n    toggleIsLoading: (isLoading: boolean) => ({type: 'TOGGLE_IS_LOADING', isLoading} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalCount} as const),\n    setCurrentPage: (pageNumber: number) => ({type: 'SET_CURRENT_PAGE', pageNumber} as const),\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n    isFollow: (isFollow: boolean) => ({type: 'IS_FOLLOW', isFollow} as const)\n}\n\nexport const getUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleIsLoading(true))\n            dispatch(actions.setCurrentPage(currentPage))\n            dispatch(actions.setFilter(filter))\n            const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n            dispatch(actions.toggleIsLoading(false))\n            dispatch(actions.setUsers(data.items))\n            dispatch(actions.setTotalUsersCount(data.totalCount))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const isFollowedUser = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            const data = await usersAPI.isFollow(userId)\n            // @ts-ignore\n            dispatch(actions.isFollow(data))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleFollowingProgress(true, userId))\n            const data = await usersAPI.follow(userId)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.followSuccess(userId))\n                dispatch(actions.isFollow(true))\n                await dispatch(getFriendsList())\n            }\n            dispatch(actions.toggleFollowingProgress(false, userId))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        try {\n            dispatch(actions.toggleFollowingProgress(true, userId))\n            const data = await usersAPI.unfollow(userId)\n\n            if (data.resultCode === ResultCodes.Success) {\n                dispatch(actions.unfollowSuccess(userId))\n                dispatch(actions.isFollow(false))\n                await dispatch(getFriendsList())\n            }\n            dispatch(actions.toggleFollowingProgress(false, userId))\n        } catch (e) {\n            const message = e.message\n            dispatch(action.catchError(true, message))\n        }\n    }\n}\n\nexport default usersReducer\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__1jCQ3\",\"header\":\"post_header__2t5cH\",\"left\":\"post_left__1q5zG\",\"author\":\"post_author__1OlPZ\",\"content\":\"post_content__QUk1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__v9FKw\",\"logotype\":\"header_logotype__3t_N6\",\"login\":\"header_login__3v_4I\",\"logout\":\"header_logout__1MXam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__1lZIc\",\"leftCol\":\"footer_leftCol__-Ohmk\",\"rightCol\":\"footer_rightCol__3BfnC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"friend_friend__1bWIq\",\"photo\":\"friend_photo__2cFYB\",\"name\":\"friend_name__3gArK\"};","import axios from 'axios'\nimport {UserType} from '../types/types'\n\nexport type GetItemsType = {\n    items: UserType[]\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodes> = {\n    data: D\n    messages: string[]\n    resultCode: RC\n}\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': 'a60e2925-9e48-4e88-a8f4-0ca5f14206c3'\n    }\n})\nexport enum ResultCodes {\n    Success = 0,\n    Error = 1\n}\nexport enum ResultCodesForCaptcha {\n    CaptchaIsRequired = 10\n}\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const requiredField: FieldValidatorType = (value) => {\n    if (value) {\n        return undefined\n    }\n\n    return 'Required field'\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`\n    }\n\n    return undefined\n}\n"],"sourceRoot":""}