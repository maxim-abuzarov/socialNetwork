{"version":3,"sources":["components/users/users.module.css","components/users/searchform.module.css","components/common/paginator/Paginator.tsx","components/users/User.tsx","components/users/UsersSearchForm.tsx","components/users/Users.tsx","redux/selectors/usersSelectors.ts","components/users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalItemsCount","pageSize","currentPage","portionSize","isLoading","onPageChanged","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","className","usersClasses","pagesLoading","page","onClick","filter","map","pageSelected","User","user","followingProgress","follow","unfollow","usersLoading","name","toLowerCase","photo","to","id","src","photos","large","avatar","alt","status","button","followed","disabled","some","UsersSearchForm","React","memo","onFilterChanged","searchFormClasses","form","initialValues","term","friend","onSubmit","values","setSubmitting","isSubmitting","type","placeholder","as","value","Users","totalUsersCount","users","inner","Loading","getUsersInfo","state","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoading","getFollowingProgress","getUsersFilter","UsersContainer","pageNumber","props","getUsers","this","Component","compose","connect"],"mappings":"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","file":"static/js/5.a45f65f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"users_inner__8zw3D\",\"user\":\"users_user__35VOC\",\"usersLoading\":\"users_usersLoading__1Z-K5\",\"name\":\"users_name__Or0kG\",\"photo\":\"users_photo__Z_NMi\",\"status\":\"users_status__HnLT-\",\"button\":\"users_button__2U6vF\",\"followed\":\"users_followed__1INXW\",\"pages\":\"users_pages__2zuKX\",\"pagesLoading\":\"users_pagesLoading__zGKft\",\"page\":\"users_page__1VGXq\",\"pageSelected\":\"users_pageSelected__3AnPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"searchform_form__3QDMb\"};","import React, {FC, useState} from 'react'\nimport usersClasses from '../../users/users.module.css'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    portionSize?: number\n    isLoading: boolean\n    onPageChanged: (pageNumber: number) => void\n}\n\nconst Paginator: FC<PropsType> = ({\n                                        totalItemsCount,\n                                        pageSize,\n                                        currentPage,\n                                        portionSize = 15,\n                                        isLoading,\n                                        onPageChanged\n}) => {\n    const pagesCount = Math.ceil(totalItemsCount / pageSize) // count quantity of pages\n\n    // pagination\n    const portionCount = Math.ceil(pagesCount / portionSize)\n    const [portionNumber, setPortionNumber] = useState(1)\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    const rightPortionPageNumber = portionNumber * portionSize\n\n    const pages = []\n    for (let i=1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    return (\n        <div className={isLoading ? usersClasses.pagesLoading : usersClasses.pages}>\n            {portionNumber > 1 &&\n            <button\n                className={usersClasses.page}\n                onClick={ () => {setPortionNumber(portionNumber - 1)} }\n            >&lt;</button>\n            }\n\n            {pages\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\n                .map(page => {\n                    return <div\n                        key={page}\n                        className={currentPage === page\n                            ? usersClasses.pageSelected\n                            : usersClasses.page }\n                        onClick={ () => {onPageChanged(page)} }\n                    >{page}</div>\n                })\n            }\n\n            {portionCount > portionNumber &&\n            <button\n                className={usersClasses.page}\n                onClick={ () => { setPortionNumber(portionNumber + 1)} }\n            >&gt;</button>\n            }\n        </div>\n    )\n}\n\nexport default Paginator\n","import React, {FC} from 'react'\nimport usersClasses from './users.module.css'\nimport {NavLink} from 'react-router-dom'\nimport avatar from '../../assets/img/unknownUser.jpeg'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingProgress: number[]\n    isLoading: boolean\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst User: FC<PropsType> = ({user, followingProgress, follow, unfollow, isLoading}) => {\n    return (\n        <div className={isLoading ? usersClasses.usersLoading : usersClasses.user}>\n\n            <div className={usersClasses.name}>\n                <h1>{user.name.toLowerCase()}</h1>\n            </div>\n\n            <div className={usersClasses.photo}>\n                <NavLink to={'/profile/' + user.id}>\n                    <img src={user.photos.large !== null ? user.photos.large : avatar} alt='User avatar'/>\n                </NavLink>\n            </div>\n\n            <div className={usersClasses.status}>\n                <h3>{user.status !== null ? user.status : 'There could be a status here, but...'}</h3>\n            </div>\n\n            <div className={usersClasses.button}>\n                {user.followed\n                    ? <button\n                        disabled={followingProgress.some(id => id === user.id)}\n                        onClick={() => {\n                            unfollow(user.id)\n                        }}\n                        className={usersClasses.followed}\n                    >Followed</button>\n\n                    : <button\n                        disabled={followingProgress.some(id => id === user.id)}\n                        onClick={() => {\n                            follow(user.id)\n                        }}\n                    >Follow</button>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default User\n","import {Field, Form, Formik} from 'formik'\nimport React, {FC} from 'react'\nimport searchFormClasses from './searchform.module.css'\nimport {FilterType} from '../../redux/reducers/usersReducer'\n\ntype PropsType = {\n\tonFilterChanged: (filter: FilterType) => void\n}\ntype FormType = {\n\tterm: string\n\tfriend: 'true' | 'false' | 'null'\n}\n\n\nconst UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\n\tconst submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\n\t\tconst filter: FilterType = {\n\t\t\tterm: values.term,\n\t\t\tfriend: values.friend === 'null'\n\t\t\t\t? null\n\t\t\t\t: values.friend === 'true'\n\t\t\t\t\t? true\n\t\t\t\t\t: false\n\t\t}\n\t\tonFilterChanged(filter)\n\t\tsetSubmitting(false)\n\t}\n\n\treturn (\n\t\t<div className={searchFormClasses.form}>\n\t\t\t<Formik\n\t\t\t\tinitialValues={{term: '', friend: 'null'}}\n\t\t\t\tonSubmit={submit}\n\t\t\t>\n\n\t\t\t{\n\t\t\t\t({isSubmitting}) => (\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Field type='text' name='term' placeholder='Enter name' />\n\t\t\t\t\t\t<Field name='friend' as='select'>\n\t\t\t\t\t\t\t<option value='null'>All</option>\n\t\t\t\t\t\t\t<option value='true'>Only followed</option>\n\t\t\t\t\t\t\t<option value='false'>Only unfollowed</option>\n\t\t\t\t\t\t</Field>\n\t\t\t\t\t\t<button type='submit' disabled={isSubmitting}>\n\t\t\t\t\t\t\tFind\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Form>\n\t\t\t\t)\n\t\t\t}\n\t\t\t</Formik>\n\t\t</div>\n\t)\n})\n\nexport default UsersSearchForm\n","import React, {FC} from 'react'\nimport usersClasses from './users.module.css'\nimport Loading from '../common/loading/Loading'\nimport Paginator from '../common/paginator/Paginator'\nimport {UserType} from '../../types/types'\nimport User from './User'\nimport UsersSearchForm from './UsersSearchForm'\nimport {FilterType} from '../../redux/reducers/usersReducer'\n\ntype PropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    users: UserType[]\n    followingProgress: number[]\n    isLoading: boolean\n    onFilterChanged: (filter: FilterType) => void\n    onPageChanged: (pageNumber: number) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst Users: FC<PropsType> = ({\n                                  totalUsersCount,\n                                  pageSize,\n                                  currentPage,\n                                  users,\n                                  followingProgress,\n                                  isLoading,\n                                  onPageChanged,\n                                  follow,\n                                  unfollow,\n                                  onFilterChanged\n}) => {\n    return (\n        <div className={usersClasses.inner}>\n            {isLoading ? <Loading /> : null}\n\n            <Paginator\n                totalItemsCount={totalUsersCount}\n                pageSize={pageSize}\n                currentPage={currentPage}\n                onPageChanged={onPageChanged}\n                isLoading={isLoading}\n            />\n\n            <UsersSearchForm onFilterChanged={onFilterChanged} />\n\n            {users.map(user => {\n                return <User\n                    key={user.id}\n                    user={user}\n                    followingProgress={followingProgress}\n                    follow={follow}\n                    unfollow={unfollow}\n                    isLoading={isLoading}\n                />})\n            }\n        </div>\n    )\n}\n\nexport default Users\n","import {AppStateType} from '../store'\n\nexport const getUsersInfo = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n    return state.usersPage.isLoading\n}\n\nexport const getFollowingProgress = (state: AppStateType) => {\n    return state.usersPage.followingProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport Users from './Users'\nimport {\n    FilterType,\n    follow,\n    getUsers,\n    unfollow,\n} from '../../redux/reducers/usersReducer'\nimport {\n    getCurrentPage,\n    getFollowingProgress,\n    getIsLoading,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersFilter,\n    getUsersInfo\n} from '../../redux/selectors/usersSelectors'\nimport {UserType} from '../../types/types'\nimport {AppStateType} from '../../redux/store'\nimport {compose} from 'redux'\n\ntype MapPropsType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isLoading: boolean\n    followingProgress: number[]\n    filter: FilterType\n}\ntype DispatchPropsType = {\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\ntype PropsType = MapPropsType & DispatchPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize, this.props.filter)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize, this.props.filter)\n    }\n\n    onFilterChanged = (filter: FilterType) => {\n        this.props.getUsers(1, this.props.pageSize, filter)\n    }\n\n    render() {\n        return <>\n            <Users\n                users={this.props.users}\n                pageSize={this.props.pageSize}\n                totalUsersCount={this.props.totalUsersCount}\n                currentPage={this.props.currentPage}\n                isLoading={this.props.isLoading}\n                followingProgress={this.props.followingProgress}\n                onPageChanged={this.onPageChanged}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                onFilterChanged={this.onFilterChanged}\n            />\n        </>\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapPropsType => {\n    return {\n        users: getUsersInfo(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isLoading: getIsLoading(state),\n        followingProgress: getFollowingProgress(state),\n        filter: getUsersFilter(state)\n    }\n}\n\nexport default compose(\n    connect<MapPropsType, DispatchPropsType, {},  AppStateType>(\n        mapStateToProps,\n        {follow, unfollow, getUsers})\n)(UsersContainer)\n"],"sourceRoot":""}