{"version":3,"sources":["components/users/users.module.css","components/common/paginator/Paginator.tsx","components/users/User.tsx","components/users/Users.tsx","redux/selectors/usersSelectors.ts","components/users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalItemsCount","pageSize","currentPage","portionSize","isLoading","onPageChanged","pagesCount","Math","ceil","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","className","usersClasses","pagesLoading","page","onClick","filter","map","pageSelected","User","user","followingProgress","follow","unfollow","usersLoading","name","toLowerCase","photo","to","id","src","photos","large","avatar","alt","status","button","followed","disabled","some","Users","totalUsersCount","users","inner","Loading","getUsersInfo","state","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoading","getFollowingProgress","UsersContainer","pageNumber","props","getUsers","this","React","Component","compose","connect"],"mappings":"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","file":"static/js/5.24721af9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"users_inner__8zw3D\",\"user\":\"users_user__35VOC\",\"usersLoading\":\"users_usersLoading__1Z-K5\",\"name\":\"users_name__Or0kG\",\"photo\":\"users_photo__Z_NMi\",\"status\":\"users_status__HnLT-\",\"button\":\"users_button__2U6vF\",\"followed\":\"users_followed__1INXW\",\"pages\":\"users_pages__2zuKX\",\"pagesLoading\":\"users_pagesLoading__zGKft\",\"page\":\"users_page__1VGXq\",\"pageSelected\":\"users_pageSelected__3AnPR\"};","import React, {FC, useState} from 'react'\nimport usersClasses from '../../users/users.module.css'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    portionSize?: number\n    isLoading: boolean\n    onPageChanged: (pageNumber: number) => void\n}\n\nconst Paginator: FC<PropsType> = ({\n                                        totalItemsCount,\n                                        pageSize,\n                                        currentPage,\n                                        portionSize = 15,\n                                        isLoading,\n                                        onPageChanged\n}) => {\n    const pagesCount = Math.ceil(totalItemsCount / pageSize) // count quantity of pages\n\n    // pagination\n    const portionCount = Math.ceil(pagesCount / portionSize)\n    const [portionNumber, setPortionNumber] = useState(1)\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    const rightPortionPageNumber = portionNumber * portionSize\n\n    const pages = []\n    for (let i=1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    return (\n        <div className={isLoading ? usersClasses.pagesLoading : usersClasses.pages}>\n            {portionNumber > 1 &&\n            <button\n                className={usersClasses.page}\n                onClick={ () => {setPortionNumber(portionNumber - 1)} }\n            >&lt;</button>\n            }\n\n            {pages\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\n                .map(page => {\n                    return <div\n                        key={page}\n                        className={currentPage === page\n                            ? usersClasses.pageSelected\n                            : usersClasses.page }\n                        onClick={ () => {onPageChanged(page)} }\n                    >{page}</div>\n                })\n            }\n\n            {portionCount > portionNumber &&\n            <button\n                className={usersClasses.page}\n                onClick={ () => { setPortionNumber(portionNumber + 1)} }\n            >&gt;</button>\n            }\n        </div>\n    )\n}\n\nexport default Paginator\n","import React, {FC} from 'react'\nimport usersClasses from './users.module.css'\nimport {NavLink} from 'react-router-dom'\nimport avatar from '../../assets/img/unknownUser.jpeg'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingProgress: number[]\n    isLoading: boolean\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst User: FC<PropsType> = ({user, followingProgress, follow, unfollow, isLoading}) => {\n    return (\n        <div className={isLoading ? usersClasses.usersLoading : usersClasses.user}>\n\n            <div className={usersClasses.name}>\n                <h1>{user.name.toLowerCase()}</h1>\n            </div>\n\n            <div className={usersClasses.photo}>\n                <NavLink to={'/profile/' + user.id}>\n                    <img src={user.photos.large !== null ? user.photos.large : avatar} alt='User avatar'/>\n                </NavLink>\n            </div>\n\n            <div className={usersClasses.status}>\n                <h3>{user.status !== null ? user.status : 'There could be a status here, but...'}</h3>\n            </div>\n\n            <div className={usersClasses.button}>\n                {user.followed\n                    ? <button\n                        disabled={followingProgress.some(id => id === user.id)}\n                        onClick={() => {\n                            unfollow(user.id)\n                        }}\n                        className={usersClasses.followed}\n                    >Followed</button>\n\n                    : <button\n                        disabled={followingProgress.some(id => id === user.id)}\n                        onClick={() => {\n                            follow(user.id)\n                        }}\n                    >Follow</button>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default User\n","import React, {FC} from 'react'\nimport usersClasses from './users.module.css'\nimport Loading from '../common/loading/Loading'\nimport Paginator from '../common/paginator/Paginator'\nimport {UserType} from '../../types/types'\nimport User from './User'\n\ntype PropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    users: UserType[]\n    followingProgress: number[]\n    isLoading: boolean\n    onPageChanged: (pageNumber: number) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst Users: FC<PropsType> = ({\n                                  totalUsersCount,\n                                  pageSize,\n                                  currentPage,\n                                  users,\n                                  followingProgress,\n                                  isLoading,\n                                  onPageChanged,\n                                  follow,\n                                  unfollow\n}) => {\n    return (\n        <div className={usersClasses.inner}>\n            {isLoading ? <Loading /> : null}\n\n            <Paginator\n                totalItemsCount={totalUsersCount}\n                pageSize={pageSize}\n                currentPage={currentPage}\n                onPageChanged={onPageChanged}\n                isLoading={isLoading}\n            />\n\n            {users.map(user => {\n                return <User\n                    key={user.id}\n                    user={user}\n                    followingProgress={followingProgress}\n                    follow={follow}\n                    unfollow={unfollow}\n                    isLoading={isLoading}\n                />})\n            }\n        </div>\n    )\n}\n\nexport default Users\n","import {AppStateType} from '../store'\n\nexport const getUsersInfo = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n    return state.usersPage.isLoading\n}\n\nexport const getFollowingProgress = (state: AppStateType) => {\n    return state.usersPage.followingProgress\n}\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport Users from './Users'\nimport {\n    follow,\n    getUsers,\n    unfollow,\n} from '../../redux/reducers/usersReducer'\nimport {\n    getCurrentPage,\n    getFollowingProgress,\n    getIsLoading,\n    getPageSize,\n    getTotalUsersCount,\n    getUsersInfo\n} from '../../redux/selectors/usersSelectors'\nimport {UserType} from '../../types/types'\nimport {AppStateType} from '../../redux/store'\nimport {compose} from 'redux'\n\ntype MapPropsType = {\n    users: UserType[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isLoading: boolean\n    followingProgress: number[]\n}\ntype DispatchPropsType = {\n    getUsers: (currentPage: number, pageSize: number) => void\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\ntype PropsType = MapPropsType & DispatchPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n        return <>\n            <Users\n                users={this.props.users}\n                pageSize={this.props.pageSize}\n                totalUsersCount={this.props.totalUsersCount}\n                currentPage={this.props.currentPage}\n                isLoading={this.props.isLoading}\n                followingProgress={this.props.followingProgress}\n                onPageChanged={this.onPageChanged}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n            />\n        </>\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapPropsType => {\n    return {\n        users: getUsersInfo(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isLoading: getIsLoading(state),\n        followingProgress: getFollowingProgress(state)\n    }\n}\n\nexport default compose(\n    connect<MapPropsType, DispatchPropsType, {},  AppStateType>(\n        mapStateToProps,\n        {follow, unfollow, getUsers})\n)(UsersContainer)\n"],"sourceRoot":""}