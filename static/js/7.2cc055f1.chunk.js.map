{"version":3,"sources":["pages/chat/chatpage.module.css","pages/chat/ChatPage.tsx"],"names":["module","exports","Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","className","chatPageClasses","wrapper","Messages","AddMessage","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoscroll","setIsAutoscroll","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","Message","id","ref","React","memo","to","userId","header","avatar","avatarWrapper","src","photo","alt","author","userName","content","setMessage","status","send","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,SAAW,2BAA2B,QAAU,0BAA0B,OAAS,yBAAyB,OAAS,yBAAyB,cAAgB,gCAAgC,OAAS,yBAAyB,QAAU,0BAA0B,KAAO,yB,sHCa3TC,EAAW,WAChB,IAAMC,EAAWC,cASjB,OAPAC,qBAAU,WAET,OADAF,EAASG,eACF,WACNH,EAASI,kBAER,IAGF,sBAAKC,UAAWC,IAAgBC,QAAhC,UACC,cAACC,EAAD,IACA,cAACC,EAAD,QAKGD,EAAe,WACpB,IAAME,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC3DI,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAhB,qBAAU,WACU,IAAD,EAAde,IACH,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAEpD,CAACX,IAGH,sBAAKL,UAAWC,IAAgBI,SAAUY,SAhBrB,SAACC,GACtB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KACjFb,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWjC,UACER,EAASqB,KAAI,SAAAC,GAAO,OAAI,cAACC,EAAD,CAA0BD,QAASA,GAArBA,EAAQE,OAC/C,qBAAKC,IAAKrB,QAKPmB,EAA6CG,IAAMC,MAAK,YAAgB,IAAdL,EAAa,EAAbA,QAC/D,OACC,sBAAK3B,UAAWC,IAAgB0B,QAAhC,UAEC,eAAC,IAAD,CAASM,GAAI,YAAcN,EAAQO,OAAQlC,UAAWC,IAAgBkC,OAAtE,UAEC,qBAAKnC,UAAWC,IAAgBmC,OAAhC,SACC,qBAAKpC,UAAWC,IAAgBoC,cAAhC,SACC,qBAAKC,IAAKX,EAAQY,MAAOC,IAAI,sBAI/B,qBAAKxC,UAAWC,IAAgBwC,OAAhC,SACC,6BAAKd,EAAQe,gBAKf,qBAAK1C,UAAWC,IAAgB0C,QAAhC,SACC,6BAAKhB,EAAQA,kBAOXvB,EAAiB,WACtB,MAA8BO,mBAAS,IAAvC,mBAAOgB,EAAP,KAAgBiB,EAAhB,KACMC,EAASvC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKqC,UACzDlD,EAAWC,cAUjB,OACC,sBAAKI,UAAWC,IAAgB6C,KAAhC,UACC,0BAAUC,SAAU,SAAC7B,GAAD,OAAO0B,EAAW1B,EAAEE,cAAc4B,QAAQA,MAAOrB,IACrE,wBAAQsB,SAAqB,UAAXJ,EAAoBK,QAXb,WACrBvB,IAGLhC,EAASwD,YAAYxB,IACrBiB,EAAW,MAMV,sBAKYQ,UAnGM,WACpB,OACC,cAAC1D,EAAD","file":"static/js/7.2cc055f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"chatpage_wrapper__3P3RA\",\"messages\":\"chatpage_messages__1PDBs\",\"message\":\"chatpage_message__1lgSy\",\"header\":\"chatpage_header__1WxWZ\",\"avatar\":\"chatpage_avatar__1LXn1\",\"avatarWrapper\":\"chatpage_avatarWrapper__i84AB\",\"author\":\"chatpage_author__2khn9\",\"content\":\"chatpage_content__2OZ3C\",\"send\":\"chatpage_send__WADT4\"};","import React, {FC, useEffect, useRef, useState} from 'react'\nimport chatPageClasses from './chatpage.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {ChatMessageAPIType} from '../../api/chatApi'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/reducers/chatReducer'\nimport {AppStateType} from '../../redux/store'\n\nconst ChatPage: FC = () => {\n\treturn (\n\t\t<Chat />\n\t)\n}\n\nconst Chat: FC = () => {\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tdispatch(startMessagesListening())\n\t\treturn () => {\n\t\t\tdispatch(stopMessagesListening())\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<div className={chatPageClasses.wrapper}>\n\t\t\t<Messages />\n\t\t\t<AddMessage />\n\t\t</div>\n\t)\n}\n\nconst Messages: FC = () => {\n\tconst messages = useSelector((state: AppStateType) => state.chat.messages)\n\tconst messagesAnchorRef = useRef<HTMLDivElement>(null)\n\tconst [isAutoscroll, setIsAutoscroll] = useState(true)\n\n\tconst scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n\t\tconst element = e.currentTarget\n\t\tif (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight) < 200) {\n\t\t\t!isAutoscroll && setIsAutoscroll(true)\n\t\t} else {\n\t\t\tisAutoscroll && setIsAutoscroll(false)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (isAutoscroll) {\n\t\t\tmessagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n\t\t}\n\t}, [messages])\n\n\treturn (\n\t\t<div className={chatPageClasses.messages} onScroll={scrollHandler} >\n\t\t\t{messages.map(message => <Message key={message.id} message={message} />)}\n\t\t\t<div ref={messagesAnchorRef}/>\n\t\t</div>\n\t)\n}\n\nconst Message: FC<{message: ChatMessageAPIType}> = React.memo(({message}) => {\n\treturn (\n\t\t<div className={chatPageClasses.message}>\n\n\t\t\t<NavLink to={\"/profile/\" + message.userId} className={chatPageClasses.header}>\n\n\t\t\t\t<div className={chatPageClasses.avatar}>\n\t\t\t\t\t<div className={chatPageClasses.avatarWrapper}>\n\t\t\t\t\t\t<img src={message.photo} alt=\"Author avatar\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className={chatPageClasses.author}>\n\t\t\t\t\t<h4>{message.userName}</h4>\n\t\t\t\t</div>\n\n\t\t\t</NavLink>\n\n\t\t\t<div className={chatPageClasses.content}>\n\t\t\t\t<h2>{message.message}</h2>\n\t\t\t</div>\n\n\t\t</div>\n\t)\n})\n\nconst AddMessage: FC = () => {\n\tconst [message, setMessage] = useState('')\n\tconst status = useSelector((state: AppStateType) => state.chat.status)\n\tconst dispatch = useDispatch()\n\n\tconst sendMessageHandler = () => {\n\t\tif (!message) {\n\t\t\treturn\n\t\t}\n\t\tdispatch(sendMessage(message))\n\t\tsetMessage('')\n\t}\n\n\treturn (\n\t\t<div className={chatPageClasses.send}>\n\t\t\t<textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\n\t\t\t<button disabled={status !== 'Ready'} onClick={sendMessageHandler}>Send</button>\n\t\t</div>\n\t)\n}\n\nexport default ChatPage\n"],"sourceRoot":""}